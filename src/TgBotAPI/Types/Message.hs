-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema Message
module TgBotAPI.Types.Message where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.Animation (Animation)
import  {-# SOURCE #-}  TgBotAPI.Types.Audio (Audio)
import  {-# SOURCE #-}  TgBotAPI.Types.Chat (Chat)
import  {-# SOURCE #-}  TgBotAPI.Types.Contact (Contact)
import  {-# SOURCE #-}  TgBotAPI.Types.Dice (Dice)
import  {-# SOURCE #-}  TgBotAPI.Types.Document (Document)
import  {-# SOURCE #-}  TgBotAPI.Types.Game (Game)
import  {-# SOURCE #-}  TgBotAPI.Types.InlineKeyboardMarkup (InlineKeyboardMarkup)
import  {-# SOURCE #-}  TgBotAPI.Types.Invoice (Invoice)
import  {-# SOURCE #-}  TgBotAPI.Types.Location (Location)
import  {-# SOURCE #-}  TgBotAPI.Types.MessageAutoDeleteTimerChanged (MessageAutoDeleteTimerChanged)
import  {-# SOURCE #-}  TgBotAPI.Types.MessageEntity (MessageEntity)
import  {-# SOURCE #-}  TgBotAPI.Types.PassportData (PassportData)
import  {-# SOURCE #-}  TgBotAPI.Types.PhotoSize (PhotoSize)
import  {-# SOURCE #-}  TgBotAPI.Types.Poll (Poll)
import  {-# SOURCE #-}  TgBotAPI.Types.ProximityAlertTriggered (ProximityAlertTriggered)
import  {-# SOURCE #-}  TgBotAPI.Types.Sticker (Sticker)
import  {-# SOURCE #-}  TgBotAPI.Types.SuccessfulPayment (SuccessfulPayment)
import  {-# SOURCE #-}  TgBotAPI.Types.User (User)
import  {-# SOURCE #-}  TgBotAPI.Types.Venue (Venue)
import  {-# SOURCE #-}  TgBotAPI.Types.Video (Video)
import  {-# SOURCE #-}  TgBotAPI.Types.VideoNote (VideoNote)
import  {-# SOURCE #-}  TgBotAPI.Types.Voice (Voice)
import  {-# SOURCE #-}  TgBotAPI.Types.VoiceChatEnded (VoiceChatEnded)
import  {-# SOURCE #-}  TgBotAPI.Types.VoiceChatParticipantsInvited (VoiceChatParticipantsInvited)
import  {-# SOURCE #-}  TgBotAPI.Types.VoiceChatScheduled (VoiceChatScheduled)

-- | Defines the object schema located at @components.schemas.Message@ in the specification.
-- 
-- This object represents a message.
data Message = Message {
  -- | animation: This object represents an animation file (GIF or H.264\/MPEG-4 AVC video without sound).
  animation :: (GHC.Maybe.Maybe Animation)
  -- | audio: This object represents an audio file to be treated as music by the Telegram clients.
  , audio :: (GHC.Maybe.Maybe Audio)
  -- | author_signature: *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
  , authorSignature :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | caption: *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
  , caption :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | caption_entities: *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
  , captionEntities :: (GHC.Maybe.Maybe ([MessageEntity]))
  -- | channel_chat_created: *Optional*. Service message: the channel has been created. This field can\'t be received in a message coming through updates, because bot can\'t be a member of a channel when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a channel.
  , channelChatCreated :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | chat: This object represents a chat.
  , chat :: Chat
  -- | connected_website: *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login Â»](\/widgets\/login)
  , connectedWebsite :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | contact: This object represents a phone contact.
  , contact :: (GHC.Maybe.Maybe Contact)
  -- | date: Date the message was sent in Unix time
  , date :: GHC.Int.Int64
  -- | delete_chat_photo: *Optional*. Service message: the chat photo was deleted
  , deleteChatPhoto :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | dice: This object represents an animated emoji that displays a random value.
  , dice :: (GHC.Maybe.Maybe Dice)
  -- | document: This object represents a general file (as opposed to [photos](https:\/\/core.telegram.org\/bots\/api\/\#photosize), [voice messages](https:\/\/core.telegram.org\/bots\/api\/\#voice) and [audio files](https:\/\/core.telegram.org\/bots\/api\/\#audio)).
  , document :: (GHC.Maybe.Maybe Document)
  -- | edit_date: *Optional*. Date the message was last edited in Unix time
  , editDate :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | entities: *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
  , entities :: (GHC.Maybe.Maybe ([MessageEntity]))
  -- | forward_date: *Optional*. For forwarded messages, date the original message was sent in Unix time
  , forwardDate :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | forward_from: This object represents a Telegram user or bot.
  , forwardFrom :: (GHC.Maybe.Maybe User)
  -- | forward_from_chat: This object represents a chat.
  , forwardFromChat :: (GHC.Maybe.Maybe Chat)
  -- | forward_from_message_id: *Optional*. For messages forwarded from channels, identifier of the original message in the channel
  , forwardFromMessageId :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | forward_sender_name: *Optional*. Sender\'s name for messages forwarded from users who disallow adding a link to their account in forwarded messages
  , forwardSenderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | forward_signature: *Optional*. For messages forwarded from channels, signature of the post author if present
  , forwardSignature :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | from: This object represents a Telegram user or bot.
  , from :: (GHC.Maybe.Maybe User)
  -- | game: This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
  , game :: (GHC.Maybe.Maybe Game)
  -- | group_chat_created: *Optional*. Service message: the group has been created
  , groupChatCreated :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | invoice: This object contains basic information about an invoice.
  , invoice :: (GHC.Maybe.Maybe Invoice)
  -- | left_chat_member: This object represents a Telegram user or bot.
  , leftChatMember :: (GHC.Maybe.Maybe User)
  -- | location: This object represents a point on the map.
  , location :: (GHC.Maybe.Maybe Location)
  -- | media_group_id: *Optional*. The unique identifier of a media message group this message belongs to
  , mediaGroupId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message_auto_delete_timer_changed: This object represents a service message about a change in auto-delete timer settings.
  , messageAutoDeleteTimerChanged :: (GHC.Maybe.Maybe MessageAutoDeleteTimerChanged)
  -- | message_id: Unique message identifier inside this chat
  , messageId :: GHC.Int.Int64
  -- | migrate_from_chat_id: *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty\/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
  , migrateFromChatId :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | migrate_to_chat_id: *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty\/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
  , migrateToChatId :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | new_chat_members: *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
  , newChatMembers :: (GHC.Maybe.Maybe ([User]))
  -- | new_chat_photo: *Optional*. A chat photo was change to this value
  , newChatPhoto :: (GHC.Maybe.Maybe ([PhotoSize]))
  -- | new_chat_title: *Optional*. A chat title was changed to this value
  , newChatTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | passport_data: Contains information about Telegram Passport data shared with the bot by the user.
  , passportData :: (GHC.Maybe.Maybe PassportData)
  -- | photo: *Optional*. Message is a photo, available sizes of the photo
  , photo :: (GHC.Maybe.Maybe ([PhotoSize]))
  -- | pinned_message: This object represents a message.
  , pinnedMessage :: (GHC.Maybe.Maybe Message)
  -- | poll: This object contains information about a poll.
  , poll :: (GHC.Maybe.Maybe Poll)
  -- | proximity_alert_triggered: This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
  , proximityAlertTriggered :: (GHC.Maybe.Maybe ProximityAlertTriggered)
  -- | reply_markup: This object represents an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
  , replyMarkup :: (GHC.Maybe.Maybe InlineKeyboardMarkup)
  -- | reply_to_message: This object represents a message.
  , replyToMessage :: (GHC.Maybe.Maybe Message)
  -- | sender_chat: This object represents a chat.
  , senderChat :: (GHC.Maybe.Maybe Chat)
  -- | sticker: This object represents a sticker.
  , sticker :: (GHC.Maybe.Maybe Sticker)
  -- | successful_payment: This object contains basic information about a successful payment.
  , successfulPayment :: (GHC.Maybe.Maybe SuccessfulPayment)
  -- | supergroup_chat_created: *Optional*. Service message: the supergroup has been created. This field can\'t be received in a message coming through updates, because bot can\'t be a member of a supergroup when it is created. It can only be found in reply\\_to\\_message if someone replies to a very first message in a directly created supergroup.
  , supergroupChatCreated :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | text: *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
  , text :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | venue: This object represents a venue.
  , venue :: (GHC.Maybe.Maybe Venue)
  -- | via_bot: This object represents a Telegram user or bot.
  , viaBot :: (GHC.Maybe.Maybe User)
  -- | video: This object represents a video file.
  , video :: (GHC.Maybe.Maybe Video)
  -- | video_note: This object represents a [video message](https:\/\/telegram.org\/blog\/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https:\/\/telegram.org\/blog\/video-messages-and-telescope)).
  , videoNote :: (GHC.Maybe.Maybe VideoNote)
  -- | voice: This object represents a voice note.
  , voice :: (GHC.Maybe.Maybe Voice)
  -- | voice_chat_ended: This object represents a service message about a voice chat ended in the chat.
  , voiceChatEnded :: (GHC.Maybe.Maybe VoiceChatEnded)
  -- | voice_chat_participants_invited: This object represents a service message about new members invited to a voice chat.
  , voiceChatParticipantsInvited :: (GHC.Maybe.Maybe VoiceChatParticipantsInvited)
  -- | voice_chat_scheduled: This object represents a service message about a voice chat scheduled in the chat.
  , voiceChatScheduled :: (GHC.Maybe.Maybe VoiceChatScheduled)
  -- | voice_chat_started: This object represents a service message about a voice chat started in the chat. Currently holds no information.
  , voiceChatStarted :: (GHC.Maybe.Maybe VoiceChatStarted)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Message
    where toJSON obj = Data.Aeson.Types.Internal.object ("animation" Data.Aeson.Types.ToJSON..= animation obj : "audio" Data.Aeson.Types.ToJSON..= audio obj : "author_signature" Data.Aeson.Types.ToJSON..= authorSignature obj : "caption" Data.Aeson.Types.ToJSON..= caption obj : "caption_entities" Data.Aeson.Types.ToJSON..= captionEntities obj : "channel_chat_created" Data.Aeson.Types.ToJSON..= channelChatCreated obj : "chat" Data.Aeson.Types.ToJSON..= chat obj : "connected_website" Data.Aeson.Types.ToJSON..= connectedWebsite obj : "contact" Data.Aeson.Types.ToJSON..= contact obj : "date" Data.Aeson.Types.ToJSON..= date obj : "delete_chat_photo" Data.Aeson.Types.ToJSON..= deleteChatPhoto obj : "dice" Data.Aeson.Types.ToJSON..= dice obj : "document" Data.Aeson.Types.ToJSON..= document obj : "edit_date" Data.Aeson.Types.ToJSON..= editDate obj : "entities" Data.Aeson.Types.ToJSON..= entities obj : "forward_date" Data.Aeson.Types.ToJSON..= forwardDate obj : "forward_from" Data.Aeson.Types.ToJSON..= forwardFrom obj : "forward_from_chat" Data.Aeson.Types.ToJSON..= forwardFromChat obj : "forward_from_message_id" Data.Aeson.Types.ToJSON..= forwardFromMessageId obj : "forward_sender_name" Data.Aeson.Types.ToJSON..= forwardSenderName obj : "forward_signature" Data.Aeson.Types.ToJSON..= forwardSignature obj : "from" Data.Aeson.Types.ToJSON..= from obj : "game" Data.Aeson.Types.ToJSON..= game obj : "group_chat_created" Data.Aeson.Types.ToJSON..= groupChatCreated obj : "invoice" Data.Aeson.Types.ToJSON..= invoice obj : "left_chat_member" Data.Aeson.Types.ToJSON..= leftChatMember obj : "location" Data.Aeson.Types.ToJSON..= location obj : "media_group_id" Data.Aeson.Types.ToJSON..= mediaGroupId obj : "message_auto_delete_timer_changed" Data.Aeson.Types.ToJSON..= messageAutoDeleteTimerChanged obj : "message_id" Data.Aeson.Types.ToJSON..= messageId obj : "migrate_from_chat_id" Data.Aeson.Types.ToJSON..= migrateFromChatId obj : "migrate_to_chat_id" Data.Aeson.Types.ToJSON..= migrateToChatId obj : "new_chat_members" Data.Aeson.Types.ToJSON..= newChatMembers obj : "new_chat_photo" Data.Aeson.Types.ToJSON..= newChatPhoto obj : "new_chat_title" Data.Aeson.Types.ToJSON..= newChatTitle obj : "passport_data" Data.Aeson.Types.ToJSON..= passportData obj : "photo" Data.Aeson.Types.ToJSON..= photo obj : "pinned_message" Data.Aeson.Types.ToJSON..= pinnedMessage obj : "poll" Data.Aeson.Types.ToJSON..= poll obj : "proximity_alert_triggered" Data.Aeson.Types.ToJSON..= proximityAlertTriggered obj : "reply_markup" Data.Aeson.Types.ToJSON..= replyMarkup obj : "reply_to_message" Data.Aeson.Types.ToJSON..= replyToMessage obj : "sender_chat" Data.Aeson.Types.ToJSON..= senderChat obj : "sticker" Data.Aeson.Types.ToJSON..= sticker obj : "successful_payment" Data.Aeson.Types.ToJSON..= successfulPayment obj : "supergroup_chat_created" Data.Aeson.Types.ToJSON..= supergroupChatCreated obj : "text" Data.Aeson.Types.ToJSON..= text obj : "venue" Data.Aeson.Types.ToJSON..= venue obj : "via_bot" Data.Aeson.Types.ToJSON..= viaBot obj : "video" Data.Aeson.Types.ToJSON..= video obj : "video_note" Data.Aeson.Types.ToJSON..= videoNote obj : "voice" Data.Aeson.Types.ToJSON..= voice obj : "voice_chat_ended" Data.Aeson.Types.ToJSON..= voiceChatEnded obj : "voice_chat_participants_invited" Data.Aeson.Types.ToJSON..= voiceChatParticipantsInvited obj : "voice_chat_scheduled" Data.Aeson.Types.ToJSON..= voiceChatScheduled obj : "voice_chat_started" Data.Aeson.Types.ToJSON..= voiceChatStarted obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("animation" Data.Aeson.Types.ToJSON..= animation obj) GHC.Base.<> (("audio" Data.Aeson.Types.ToJSON..= audio obj) GHC.Base.<> (("author_signature" Data.Aeson.Types.ToJSON..= authorSignature obj) GHC.Base.<> (("caption" Data.Aeson.Types.ToJSON..= caption obj) GHC.Base.<> (("caption_entities" Data.Aeson.Types.ToJSON..= captionEntities obj) GHC.Base.<> (("channel_chat_created" Data.Aeson.Types.ToJSON..= channelChatCreated obj) GHC.Base.<> (("chat" Data.Aeson.Types.ToJSON..= chat obj) GHC.Base.<> (("connected_website" Data.Aeson.Types.ToJSON..= connectedWebsite obj) GHC.Base.<> (("contact" Data.Aeson.Types.ToJSON..= contact obj) GHC.Base.<> (("date" Data.Aeson.Types.ToJSON..= date obj) GHC.Base.<> (("delete_chat_photo" Data.Aeson.Types.ToJSON..= deleteChatPhoto obj) GHC.Base.<> (("dice" Data.Aeson.Types.ToJSON..= dice obj) GHC.Base.<> (("document" Data.Aeson.Types.ToJSON..= document obj) GHC.Base.<> (("edit_date" Data.Aeson.Types.ToJSON..= editDate obj) GHC.Base.<> (("entities" Data.Aeson.Types.ToJSON..= entities obj) GHC.Base.<> (("forward_date" Data.Aeson.Types.ToJSON..= forwardDate obj) GHC.Base.<> (("forward_from" Data.Aeson.Types.ToJSON..= forwardFrom obj) GHC.Base.<> (("forward_from_chat" Data.Aeson.Types.ToJSON..= forwardFromChat obj) GHC.Base.<> (("forward_from_message_id" Data.Aeson.Types.ToJSON..= forwardFromMessageId obj) GHC.Base.<> (("forward_sender_name" Data.Aeson.Types.ToJSON..= forwardSenderName obj) GHC.Base.<> (("forward_signature" Data.Aeson.Types.ToJSON..= forwardSignature obj) GHC.Base.<> (("from" Data.Aeson.Types.ToJSON..= from obj) GHC.Base.<> (("game" Data.Aeson.Types.ToJSON..= game obj) GHC.Base.<> (("group_chat_created" Data.Aeson.Types.ToJSON..= groupChatCreated obj) GHC.Base.<> (("invoice" Data.Aeson.Types.ToJSON..= invoice obj) GHC.Base.<> (("left_chat_member" Data.Aeson.Types.ToJSON..= leftChatMember obj) GHC.Base.<> (("location" Data.Aeson.Types.ToJSON..= location obj) GHC.Base.<> (("media_group_id" Data.Aeson.Types.ToJSON..= mediaGroupId obj) GHC.Base.<> (("message_auto_delete_timer_changed" Data.Aeson.Types.ToJSON..= messageAutoDeleteTimerChanged obj) GHC.Base.<> (("message_id" Data.Aeson.Types.ToJSON..= messageId obj) GHC.Base.<> (("migrate_from_chat_id" Data.Aeson.Types.ToJSON..= migrateFromChatId obj) GHC.Base.<> (("migrate_to_chat_id" Data.Aeson.Types.ToJSON..= migrateToChatId obj) GHC.Base.<> (("new_chat_members" Data.Aeson.Types.ToJSON..= newChatMembers obj) GHC.Base.<> (("new_chat_photo" Data.Aeson.Types.ToJSON..= newChatPhoto obj) GHC.Base.<> (("new_chat_title" Data.Aeson.Types.ToJSON..= newChatTitle obj) GHC.Base.<> (("passport_data" Data.Aeson.Types.ToJSON..= passportData obj) GHC.Base.<> (("photo" Data.Aeson.Types.ToJSON..= photo obj) GHC.Base.<> (("pinned_message" Data.Aeson.Types.ToJSON..= pinnedMessage obj) GHC.Base.<> (("poll" Data.Aeson.Types.ToJSON..= poll obj) GHC.Base.<> (("proximity_alert_triggered" Data.Aeson.Types.ToJSON..= proximityAlertTriggered obj) GHC.Base.<> (("reply_markup" Data.Aeson.Types.ToJSON..= replyMarkup obj) GHC.Base.<> (("reply_to_message" Data.Aeson.Types.ToJSON..= replyToMessage obj) GHC.Base.<> (("sender_chat" Data.Aeson.Types.ToJSON..= senderChat obj) GHC.Base.<> (("sticker" Data.Aeson.Types.ToJSON..= sticker obj) GHC.Base.<> (("successful_payment" Data.Aeson.Types.ToJSON..= successfulPayment obj) GHC.Base.<> (("supergroup_chat_created" Data.Aeson.Types.ToJSON..= supergroupChatCreated obj) GHC.Base.<> (("text" Data.Aeson.Types.ToJSON..= text obj) GHC.Base.<> (("venue" Data.Aeson.Types.ToJSON..= venue obj) GHC.Base.<> (("via_bot" Data.Aeson.Types.ToJSON..= viaBot obj) GHC.Base.<> (("video" Data.Aeson.Types.ToJSON..= video obj) GHC.Base.<> (("video_note" Data.Aeson.Types.ToJSON..= videoNote obj) GHC.Base.<> (("voice" Data.Aeson.Types.ToJSON..= voice obj) GHC.Base.<> (("voice_chat_ended" Data.Aeson.Types.ToJSON..= voiceChatEnded obj) GHC.Base.<> (("voice_chat_participants_invited" Data.Aeson.Types.ToJSON..= voiceChatParticipantsInvited obj) GHC.Base.<> (("voice_chat_scheduled" Data.Aeson.Types.ToJSON..= voiceChatScheduled obj) GHC.Base.<> ("voice_chat_started" Data.Aeson.Types.ToJSON..= voiceChatStarted obj))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Message
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Message" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Message GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "animation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "audio")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "author_signature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption_entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "channel_chat_created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "connected_website")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "contact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "delete_chat_photo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "edit_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "forward_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "forward_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "forward_from_chat")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "forward_from_message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "forward_sender_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "forward_signature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "game")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "group_chat_created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "left_chat_member")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "media_group_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message_auto_delete_timer_changed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "migrate_from_chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "migrate_to_chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "new_chat_members")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "new_chat_photo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "new_chat_title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "passport_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "photo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pinned_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "poll")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proximity_alert_triggered")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_to_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sender_chat")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sticker")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "successful_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "supergroup_chat_created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "venue")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "via_bot")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "video")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "video_note")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voice_chat_ended")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voice_chat_participants_invited")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voice_chat_scheduled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voice_chat_started"))
-- | Create a new 'Message' with all required fields.
mkMessage :: Chat -- ^ 'chat'
  -> GHC.Int.Int64 -- ^ 'date'
  -> GHC.Int.Int64 -- ^ 'messageId'
  -> Message
mkMessage chat date messageId = Message{animation = GHC.Maybe.Nothing,
                                        audio = GHC.Maybe.Nothing,
                                        authorSignature = GHC.Maybe.Nothing,
                                        caption = GHC.Maybe.Nothing,
                                        captionEntities = GHC.Maybe.Nothing,
                                        channelChatCreated = GHC.Maybe.Nothing,
                                        chat = chat,
                                        connectedWebsite = GHC.Maybe.Nothing,
                                        contact = GHC.Maybe.Nothing,
                                        date = date,
                                        deleteChatPhoto = GHC.Maybe.Nothing,
                                        dice = GHC.Maybe.Nothing,
                                        document = GHC.Maybe.Nothing,
                                        editDate = GHC.Maybe.Nothing,
                                        entities = GHC.Maybe.Nothing,
                                        forwardDate = GHC.Maybe.Nothing,
                                        forwardFrom = GHC.Maybe.Nothing,
                                        forwardFromChat = GHC.Maybe.Nothing,
                                        forwardFromMessageId = GHC.Maybe.Nothing,
                                        forwardSenderName = GHC.Maybe.Nothing,
                                        forwardSignature = GHC.Maybe.Nothing,
                                        from = GHC.Maybe.Nothing,
                                        game = GHC.Maybe.Nothing,
                                        groupChatCreated = GHC.Maybe.Nothing,
                                        invoice = GHC.Maybe.Nothing,
                                        leftChatMember = GHC.Maybe.Nothing,
                                        location = GHC.Maybe.Nothing,
                                        mediaGroupId = GHC.Maybe.Nothing,
                                        messageAutoDeleteTimerChanged = GHC.Maybe.Nothing,
                                        messageId = messageId,
                                        migrateFromChatId = GHC.Maybe.Nothing,
                                        migrateToChatId = GHC.Maybe.Nothing,
                                        newChatMembers = GHC.Maybe.Nothing,
                                        newChatPhoto = GHC.Maybe.Nothing,
                                        newChatTitle = GHC.Maybe.Nothing,
                                        passportData = GHC.Maybe.Nothing,
                                        photo = GHC.Maybe.Nothing,
                                        pinnedMessage = GHC.Maybe.Nothing,
                                        poll = GHC.Maybe.Nothing,
                                        proximityAlertTriggered = GHC.Maybe.Nothing,
                                        replyMarkup = GHC.Maybe.Nothing,
                                        replyToMessage = GHC.Maybe.Nothing,
                                        senderChat = GHC.Maybe.Nothing,
                                        sticker = GHC.Maybe.Nothing,
                                        successfulPayment = GHC.Maybe.Nothing,
                                        supergroupChatCreated = GHC.Maybe.Nothing,
                                        text = GHC.Maybe.Nothing,
                                        venue = GHC.Maybe.Nothing,
                                        viaBot = GHC.Maybe.Nothing,
                                        video = GHC.Maybe.Nothing,
                                        videoNote = GHC.Maybe.Nothing,
                                        voice = GHC.Maybe.Nothing,
                                        voiceChatEnded = GHC.Maybe.Nothing,
                                        voiceChatParticipantsInvited = GHC.Maybe.Nothing,
                                        voiceChatScheduled = GHC.Maybe.Nothing,
                                        voiceChatStarted = GHC.Maybe.Nothing}
