-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema File
module TgBotAPI.Types.File where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.File@ in the specification.
-- 
-- This object represents a file ready to be downloaded. The file can be downloaded via the link \`https:\/\/api.telegram.org\/file\/bot\<token>\/\<file_path>\`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https:\/\/core.telegram.org\/bots\/api\/\#getfile).
-- 
-- Maximum file size to download is 20 MB
data File = File {
  -- | file_id: Identifier for this file, which can be used to download or reuse the file
  fileId :: Data.Text.Internal.Text
  -- | file_path: *Optional*. File path. Use \`https:\/\/api.telegram.org\/file\/bot\<token>\/\<file_path>\` to get the file.
  , filePath :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | file_size: *Optional*. File size, if known
  , fileSize :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
  , fileUniqueId :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON File
    where toJSON obj = Data.Aeson.Types.Internal.object ("file_id" Data.Aeson.Types.ToJSON..= fileId obj : "file_path" Data.Aeson.Types.ToJSON..= filePath obj : "file_size" Data.Aeson.Types.ToJSON..= fileSize obj : "file_unique_id" Data.Aeson.Types.ToJSON..= fileUniqueId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("file_id" Data.Aeson.Types.ToJSON..= fileId obj) GHC.Base.<> (("file_path" Data.Aeson.Types.ToJSON..= filePath obj) GHC.Base.<> (("file_size" Data.Aeson.Types.ToJSON..= fileSize obj) GHC.Base.<> ("file_unique_id" Data.Aeson.Types.ToJSON..= fileUniqueId obj))))
instance Data.Aeson.Types.FromJSON.FromJSON File
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "File" (\obj -> (((GHC.Base.pure File GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "file_path")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "file_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_unique_id"))
-- | Create a new 'File' with all required fields.
mkFile :: Data.Text.Internal.Text -- ^ 'fileId'
  -> Data.Text.Internal.Text -- ^ 'fileUniqueId'
  -> File
mkFile fileId fileUniqueId = File{fileId = fileId,
                                  filePath = GHC.Maybe.Nothing,
                                  fileSize = GHC.Maybe.Nothing,
                                  fileUniqueId = fileUniqueId}
