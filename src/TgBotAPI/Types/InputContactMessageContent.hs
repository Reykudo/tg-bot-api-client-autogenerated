-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema InputContactMessageContent
module TgBotAPI.Types.InputContactMessageContent where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.InputContactMessageContent@ in the specification.
-- 
-- Represents the [content](https:\/\/core.telegram.org\/bots\/api\/\#inputmessagecontent) of a contact message to be sent as the result of an inline query.
data InputContactMessageContent = InputContactMessageContent {
  -- | first_name: Contact\'s first name
  firstName :: Data.Text.Internal.Text
  -- | last_name: *Optional*. Contact\'s last name
  , lastName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | phone_number: Contact\'s phone number
  , phoneNumber :: Data.Text.Internal.Text
  -- | vcard: *Optional*. Additional data about the contact in the form of a [vCard](https:\/\/en.wikipedia.org\/wiki\/VCard), 0-2048 bytes
  , vcard :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InputContactMessageContent
    where toJSON obj = Data.Aeson.Types.Internal.object ("first_name" Data.Aeson.Types.ToJSON..= firstName obj : "last_name" Data.Aeson.Types.ToJSON..= lastName obj : "phone_number" Data.Aeson.Types.ToJSON..= phoneNumber obj : "vcard" Data.Aeson.Types.ToJSON..= vcard obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("first_name" Data.Aeson.Types.ToJSON..= firstName obj) GHC.Base.<> (("last_name" Data.Aeson.Types.ToJSON..= lastName obj) GHC.Base.<> (("phone_number" Data.Aeson.Types.ToJSON..= phoneNumber obj) GHC.Base.<> ("vcard" Data.Aeson.Types.ToJSON..= vcard obj))))
instance Data.Aeson.Types.FromJSON.FromJSON InputContactMessageContent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InputContactMessageContent" (\obj -> (((GHC.Base.pure InputContactMessageContent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "phone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vcard"))
-- | Create a new 'InputContactMessageContent' with all required fields.
mkInputContactMessageContent :: Data.Text.Internal.Text -- ^ 'firstName'
  -> Data.Text.Internal.Text -- ^ 'phoneNumber'
  -> InputContactMessageContent
mkInputContactMessageContent firstName phoneNumber = InputContactMessageContent{firstName = firstName,
                                                                                lastName = GHC.Maybe.Nothing,
                                                                                phoneNumber = phoneNumber,
                                                                                vcard = GHC.Maybe.Nothing}
