-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema EncryptedCredentials
module TgBotAPI.Types.EncryptedCredentials where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.EncryptedCredentials@ in the specification.
-- 
-- Contains data required for decrypting and authenticating [EncryptedPassportElement](https:\/\/core.telegram.org\/bots\/api\/\#encryptedpassportelement). See the [Telegram Passport Documentation](https:\/\/core.telegram.org\/passport\#receiving-information) for a complete description of the data decryption and authentication processes.
data EncryptedCredentials = EncryptedCredentials {
  -- | data: Base64-encoded encrypted JSON-serialized data with unique user\'s payload, data hashes and secrets required for [EncryptedPassportElement](https:\/\/core.telegram.org\/bots\/api\/\#encryptedpassportelement) decryption and authentication
  encryptedCredentialsData :: Data.Text.Internal.Text
  -- | hash: Base64-encoded data hash for data authentication
  , encryptedCredentialsHash :: Data.Text.Internal.Text
  -- | secret: Base64-encoded secret, encrypted with the bot\'s public RSA key, required for data decryption
  , encryptedCredentialsSecret :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EncryptedCredentials
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= encryptedCredentialsData obj : "hash" Data.Aeson.Types.ToJSON..= encryptedCredentialsHash obj : "secret" Data.Aeson.Types.ToJSON..= encryptedCredentialsSecret obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= encryptedCredentialsData obj) GHC.Base.<> (("hash" Data.Aeson.Types.ToJSON..= encryptedCredentialsHash obj) GHC.Base.<> ("secret" Data.Aeson.Types.ToJSON..= encryptedCredentialsSecret obj)))
instance Data.Aeson.Types.FromJSON.FromJSON EncryptedCredentials
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EncryptedCredentials" (\obj -> ((GHC.Base.pure EncryptedCredentials GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "secret"))
-- | Create a new 'EncryptedCredentials' with all required fields.
mkEncryptedCredentials :: Data.Text.Internal.Text -- ^ 'encryptedCredentialsData'
  -> Data.Text.Internal.Text -- ^ 'encryptedCredentialsHash'
  -> Data.Text.Internal.Text -- ^ 'encryptedCredentialsSecret'
  -> EncryptedCredentials
mkEncryptedCredentials encryptedCredentialsData encryptedCredentialsHash encryptedCredentialsSecret = EncryptedCredentials{encryptedCredentialsData = encryptedCredentialsData,
                                                                                                                           encryptedCredentialsHash = encryptedCredentialsHash,
                                                                                                                           encryptedCredentialsSecret = encryptedCredentialsSecret}
