-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema InlineQueryResultMpeg4Gif
module TgBotAPI.Types.InlineQueryResultMpeg4Gif where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import {-# SOURCE #-} TgBotAPI.Types.InlineKeyboardMarkup
import {-# SOURCE #-} TgBotAPI.Types.InputMessageContent
import {-# SOURCE #-} TgBotAPI.Types.MessageEntity

-- | Defines the object schema located at @components.schemas.InlineQueryResultMpeg4Gif@ in the specification.
-- 
-- Represents a link to a video animation (H.264\/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the animation.
data InlineQueryResultMpeg4Gif = InlineQueryResultMpeg4Gif {
  -- | caption: *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
  inlineQueryResultMpeg4GifCaption :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | caption_entities: *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
  , inlineQueryResultMpeg4GifCaptionEntities :: (GHC.Maybe.Maybe ([MessageEntity]))
  -- | id: Unique identifier for this result, 1-64 bytes
  , inlineQueryResultMpeg4GifId :: Data.Text.Internal.Text
  -- | input_message_content: This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:
  , inlineQueryResultMpeg4GifInputMessageContent :: (GHC.Maybe.Maybe InputMessageContent)
  -- | mpeg4_duration: *Optional*. Video duration
  , inlineQueryResultMpeg4GifMpeg4Duration :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | mpeg4_height: *Optional*. Video height
  , inlineQueryResultMpeg4GifMpeg4Height :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | mpeg4_url: A valid URL for the MP4 file. File size must not exceed 1MB
  , inlineQueryResultMpeg4GifMpeg4Url :: Data.Text.Internal.Text
  -- | mpeg4_width: *Optional*. Video width
  , inlineQueryResultMpeg4GifMpeg4Width :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | parse_mode: *Optional*. Mode for parsing entities in the caption. See [formatting options](https:\/\/core.telegram.org\/bots\/api\/\#formatting-options) for more details.
  , inlineQueryResultMpeg4GifParseMode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reply_markup: This object represents an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
  , inlineQueryResultMpeg4GifReplyMarkup :: (GHC.Maybe.Maybe InlineKeyboardMarkup)
  -- | thumb_mime_type: *Optional*. MIME type of the thumbnail, must be one of “image\/jpeg”, “image\/gif”, or “video\/mp4”. Defaults to “image\/jpeg”
  , inlineQueryResultMpeg4GifThumbMimeType :: (GHC.Maybe.Maybe InlineQueryResultMpeg4GifThumbMimeType)
  -- | thumb_url: URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
  , inlineQueryResultMpeg4GifThumbUrl :: Data.Text.Internal.Text
  -- | title: *Optional*. Title for the result
  , inlineQueryResultMpeg4GifTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type: Type of the result, must be *mpeg4\\_gif*
  , inlineQueryResultMpeg4GifType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InlineQueryResultMpeg4Gif
    where toJSON obj = Data.Aeson.Types.Internal.object ("caption" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifCaption obj : "caption_entities" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifCaptionEntities obj : "id" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifId obj : "input_message_content" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifInputMessageContent obj : "mpeg4_duration" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Duration obj : "mpeg4_height" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Height obj : "mpeg4_url" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Url obj : "mpeg4_width" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Width obj : "parse_mode" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifParseMode obj : "reply_markup" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifReplyMarkup obj : "thumb_mime_type" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifThumbMimeType obj : "thumb_url" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifThumbUrl obj : "title" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifTitle obj : "type" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("caption" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifCaption obj) GHC.Base.<> (("caption_entities" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifCaptionEntities obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifId obj) GHC.Base.<> (("input_message_content" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifInputMessageContent obj) GHC.Base.<> (("mpeg4_duration" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Duration obj) GHC.Base.<> (("mpeg4_height" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Height obj) GHC.Base.<> (("mpeg4_url" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Url obj) GHC.Base.<> (("mpeg4_width" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifMpeg4Width obj) GHC.Base.<> (("parse_mode" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifParseMode obj) GHC.Base.<> (("reply_markup" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifReplyMarkup obj) GHC.Base.<> (("thumb_mime_type" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifThumbMimeType obj) GHC.Base.<> (("thumb_url" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifThumbUrl obj) GHC.Base.<> (("title" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifTitle obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= inlineQueryResultMpeg4GifType obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON InlineQueryResultMpeg4Gif
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InlineQueryResultMpeg4Gif" (\obj -> (((((((((((((GHC.Base.pure InlineQueryResultMpeg4Gif GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption_entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "input_message_content")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mpeg4_duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mpeg4_height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mpeg4_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mpeg4_width")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parse_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb_mime_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "thumb_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'InlineQueryResultMpeg4Gif' with all required fields.
mkInlineQueryResultMpeg4Gif :: Data.Text.Internal.Text -- ^ 'inlineQueryResultMpeg4GifId'
  -> Data.Text.Internal.Text -- ^ 'inlineQueryResultMpeg4GifMpeg4Url'
  -> Data.Text.Internal.Text -- ^ 'inlineQueryResultMpeg4GifThumbUrl'
  -> Data.Text.Internal.Text -- ^ 'inlineQueryResultMpeg4GifType'
  -> InlineQueryResultMpeg4Gif
mkInlineQueryResultMpeg4Gif inlineQueryResultMpeg4GifId inlineQueryResultMpeg4GifMpeg4Url inlineQueryResultMpeg4GifThumbUrl inlineQueryResultMpeg4GifType = InlineQueryResultMpeg4Gif{inlineQueryResultMpeg4GifCaption = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifCaptionEntities = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifId = inlineQueryResultMpeg4GifId,
                                                                                                                                                                                      inlineQueryResultMpeg4GifInputMessageContent = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifMpeg4Duration = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifMpeg4Height = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifMpeg4Url = inlineQueryResultMpeg4GifMpeg4Url,
                                                                                                                                                                                      inlineQueryResultMpeg4GifMpeg4Width = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifParseMode = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifReplyMarkup = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifThumbMimeType = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifThumbUrl = inlineQueryResultMpeg4GifThumbUrl,
                                                                                                                                                                                      inlineQueryResultMpeg4GifTitle = GHC.Maybe.Nothing,
                                                                                                                                                                                      inlineQueryResultMpeg4GifType = inlineQueryResultMpeg4GifType}
-- | Defines the enum schema located at @components.schemas.InlineQueryResultMpeg4Gif.properties.thumb_mime_type@ in the specification.
-- 
-- *Optional*. MIME type of the thumbnail, must be one of “image\/jpeg”, “image\/gif”, or “video\/mp4”. Defaults to “image\/jpeg”
data InlineQueryResultMpeg4GifThumbMimeType =
   InlineQueryResultMpeg4GifThumbMimeTypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | InlineQueryResultMpeg4GifThumbMimeTypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | InlineQueryResultMpeg4GifThumbMimeTypeEnumImageJpeg -- ^ Represents the JSON value @"image/jpeg"@
  | InlineQueryResultMpeg4GifThumbMimeTypeEnumImageGif -- ^ Represents the JSON value @"image/gif"@
  | InlineQueryResultMpeg4GifThumbMimeTypeEnumVideoMp4 -- ^ Represents the JSON value @"video/mp4"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InlineQueryResultMpeg4GifThumbMimeType
    where toJSON (InlineQueryResultMpeg4GifThumbMimeTypeOther val) = val
          toJSON (InlineQueryResultMpeg4GifThumbMimeTypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (InlineQueryResultMpeg4GifThumbMimeTypeEnumImageJpeg) = "image/jpeg"
          toJSON (InlineQueryResultMpeg4GifThumbMimeTypeEnumImageGif) = "image/gif"
          toJSON (InlineQueryResultMpeg4GifThumbMimeTypeEnumVideoMp4) = "video/mp4"
instance Data.Aeson.Types.FromJSON.FromJSON InlineQueryResultMpeg4GifThumbMimeType
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "image/jpeg" -> InlineQueryResultMpeg4GifThumbMimeTypeEnumImageJpeg
                                            | val GHC.Classes.== "image/gif" -> InlineQueryResultMpeg4GifThumbMimeTypeEnumImageGif
                                            | val GHC.Classes.== "video/mp4" -> InlineQueryResultMpeg4GifThumbMimeTypeEnumVideoMp4
                                            | GHC.Base.otherwise -> InlineQueryResultMpeg4GifThumbMimeTypeOther val)
