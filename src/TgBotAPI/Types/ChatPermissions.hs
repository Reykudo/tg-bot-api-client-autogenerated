-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema ChatPermissions
module TgBotAPI.Types.ChatPermissions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.ChatPermissions@ in the specification.
-- 
-- Describes actions that a non-administrator user is allowed to take in a chat.
data ChatPermissions = ChatPermissions {
  -- | can_add_web_page_previews: *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\\_send\\_media\\_messages
  canAddWebPagePreviews :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_change_info: *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
  , canChangeInfo :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_invite_users: *Optional*. True, if the user is allowed to invite new users to the chat
  , canInviteUsers :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_pin_messages: *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
  , canPinMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_send_media_messages: *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\\_send\\_messages
  , canSendMediaMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_send_messages: *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
  , canSendMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_send_other_messages: *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\\_send\\_media\\_messages
  , canSendOtherMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_send_polls: *Optional*. True, if the user is allowed to send polls, implies can\\_send\\_messages
  , canSendPolls :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ChatPermissions
    where toJSON obj = Data.Aeson.Types.Internal.object ("can_add_web_page_previews" Data.Aeson.Types.ToJSON..= canAddWebPagePreviews obj : "can_change_info" Data.Aeson.Types.ToJSON..= canChangeInfo obj : "can_invite_users" Data.Aeson.Types.ToJSON..= canInviteUsers obj : "can_pin_messages" Data.Aeson.Types.ToJSON..= canPinMessages obj : "can_send_media_messages" Data.Aeson.Types.ToJSON..= canSendMediaMessages obj : "can_send_messages" Data.Aeson.Types.ToJSON..= canSendMessages obj : "can_send_other_messages" Data.Aeson.Types.ToJSON..= canSendOtherMessages obj : "can_send_polls" Data.Aeson.Types.ToJSON..= canSendPolls obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("can_add_web_page_previews" Data.Aeson.Types.ToJSON..= canAddWebPagePreviews obj) GHC.Base.<> (("can_change_info" Data.Aeson.Types.ToJSON..= canChangeInfo obj) GHC.Base.<> (("can_invite_users" Data.Aeson.Types.ToJSON..= canInviteUsers obj) GHC.Base.<> (("can_pin_messages" Data.Aeson.Types.ToJSON..= canPinMessages obj) GHC.Base.<> (("can_send_media_messages" Data.Aeson.Types.ToJSON..= canSendMediaMessages obj) GHC.Base.<> (("can_send_messages" Data.Aeson.Types.ToJSON..= canSendMessages obj) GHC.Base.<> (("can_send_other_messages" Data.Aeson.Types.ToJSON..= canSendOtherMessages obj) GHC.Base.<> ("can_send_polls" Data.Aeson.Types.ToJSON..= canSendPolls obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ChatPermissions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChatPermissions" (\obj -> (((((((GHC.Base.pure ChatPermissions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_add_web_page_previews")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_change_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_invite_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_pin_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_send_media_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_send_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_send_other_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_send_polls"))
-- | Create a new 'ChatPermissions' with all required fields.
mkChatPermissions :: ChatPermissions
mkChatPermissions = ChatPermissions{canAddWebPagePreviews = GHC.Maybe.Nothing,
                                    canChangeInfo = GHC.Maybe.Nothing,
                                    canInviteUsers = GHC.Maybe.Nothing,
                                    canPinMessages = GHC.Maybe.Nothing,
                                    canSendMediaMessages = GHC.Maybe.Nothing,
                                    canSendMessages = GHC.Maybe.Nothing,
                                    canSendOtherMessages = GHC.Maybe.Nothing,
                                    canSendPolls = GHC.Maybe.Nothing}
