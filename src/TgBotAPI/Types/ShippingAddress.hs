-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema ShippingAddress
module TgBotAPI.Types.ShippingAddress where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.ShippingAddress@ in the specification.
-- 
-- This object represents a shipping address.
data ShippingAddress = ShippingAddress {
  -- | city: City
  city :: Data.Text.Internal.Text
  -- | country_code: ISO 3166-1 alpha-2 country code
  , countryCode :: Data.Text.Internal.Text
  -- | post_code: Address post code
  , postCode :: Data.Text.Internal.Text
  -- | state: State, if applicable
  , state :: Data.Text.Internal.Text
  -- | street_line1: First line for the address
  , streetLine1 :: Data.Text.Internal.Text
  -- | street_line2: Second line for the address
  , streetLine2 :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ShippingAddress
    where toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= city obj : "country_code" Data.Aeson.Types.ToJSON..= countryCode obj : "post_code" Data.Aeson.Types.ToJSON..= postCode obj : "state" Data.Aeson.Types.ToJSON..= state obj : "street_line1" Data.Aeson.Types.ToJSON..= streetLine1 obj : "street_line2" Data.Aeson.Types.ToJSON..= streetLine2 obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= city obj) GHC.Base.<> (("country_code" Data.Aeson.Types.ToJSON..= countryCode obj) GHC.Base.<> (("post_code" Data.Aeson.Types.ToJSON..= postCode obj) GHC.Base.<> (("state" Data.Aeson.Types.ToJSON..= state obj) GHC.Base.<> (("street_line1" Data.Aeson.Types.ToJSON..= streetLine1 obj) GHC.Base.<> ("street_line2" Data.Aeson.Types.ToJSON..= streetLine2 obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ShippingAddress
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingAddress" (\obj -> (((((GHC.Base.pure ShippingAddress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "post_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "street_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "street_line2"))
-- | Create a new 'ShippingAddress' with all required fields.
mkShippingAddress :: Data.Text.Internal.Text -- ^ 'city'
  -> Data.Text.Internal.Text -- ^ 'countryCode'
  -> Data.Text.Internal.Text -- ^ 'postCode'
  -> Data.Text.Internal.Text -- ^ 'state'
  -> Data.Text.Internal.Text -- ^ 'streetLine1'
  -> Data.Text.Internal.Text -- ^ 'streetLine2'
  -> ShippingAddress
mkShippingAddress city countryCode postCode state streetLine1 streetLine2 = ShippingAddress{city = city,
                                                                                            countryCode = countryCode,
                                                                                            postCode = postCode,
                                                                                            state = state,
                                                                                            streetLine1 = streetLine1,
                                                                                            streetLine2 = streetLine2}
