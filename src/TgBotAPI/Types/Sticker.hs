-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema Sticker
module TgBotAPI.Types.Sticker where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.MaskPosition (MaskPosition)
import  {-# SOURCE #-}  TgBotAPI.Types.PhotoSize (PhotoSize)

-- | Defines the object schema located at @components.schemas.Sticker@ in the specification.
-- 
-- This object represents a sticker.
data Sticker = Sticker {
  -- | emoji: *Optional*. Emoji associated with the sticker
  emoji :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | file_id: Identifier for this file, which can be used to download or reuse the file
  , fileId :: Data.Text.Internal.Text
  -- | file_size: *Optional*. File size
  , fileSize :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
  , fileUniqueId :: Data.Text.Internal.Text
  -- | height: Sticker height
  , height :: GHC.Int.Int64
  -- | is_animated: *True*, if the sticker is [animated](https:\/\/telegram.org\/blog\/animated-stickers)
  , isAnimated :: GHC.Types.Bool
  -- | mask_position: This object describes the position on faces where a mask should be placed by default.
  , maskPosition :: (GHC.Maybe.Maybe MaskPosition)
  -- | set_name: *Optional*. Name of the sticker set to which the sticker belongs
  , setName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | thumb: This object represents one size of a photo or a [file](https:\/\/core.telegram.org\/bots\/api\/\#document) \/ [sticker](https:\/\/core.telegram.org\/bots\/api\/\#sticker) thumbnail.
  , thumb :: (GHC.Maybe.Maybe PhotoSize)
  -- | width: Sticker width
  , width :: GHC.Int.Int64
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Sticker
    where toJSON obj = Data.Aeson.Types.Internal.object ("emoji" Data.Aeson.Types.ToJSON..= emoji obj : "file_id" Data.Aeson.Types.ToJSON..= fileId obj : "file_size" Data.Aeson.Types.ToJSON..= fileSize obj : "file_unique_id" Data.Aeson.Types.ToJSON..= fileUniqueId obj : "height" Data.Aeson.Types.ToJSON..= height obj : "is_animated" Data.Aeson.Types.ToJSON..= isAnimated obj : "mask_position" Data.Aeson.Types.ToJSON..= maskPosition obj : "set_name" Data.Aeson.Types.ToJSON..= setName obj : "thumb" Data.Aeson.Types.ToJSON..= thumb obj : "width" Data.Aeson.Types.ToJSON..= width obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("emoji" Data.Aeson.Types.ToJSON..= emoji obj) GHC.Base.<> (("file_id" Data.Aeson.Types.ToJSON..= fileId obj) GHC.Base.<> (("file_size" Data.Aeson.Types.ToJSON..= fileSize obj) GHC.Base.<> (("file_unique_id" Data.Aeson.Types.ToJSON..= fileUniqueId obj) GHC.Base.<> (("height" Data.Aeson.Types.ToJSON..= height obj) GHC.Base.<> (("is_animated" Data.Aeson.Types.ToJSON..= isAnimated obj) GHC.Base.<> (("mask_position" Data.Aeson.Types.ToJSON..= maskPosition obj) GHC.Base.<> (("set_name" Data.Aeson.Types.ToJSON..= setName obj) GHC.Base.<> (("thumb" Data.Aeson.Types.ToJSON..= thumb obj) GHC.Base.<> ("width" Data.Aeson.Types.ToJSON..= width obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Sticker
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Sticker" (\obj -> (((((((((GHC.Base.pure Sticker GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "emoji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "file_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_unique_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_animated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mask_position")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "set_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "width"))
-- | Create a new 'Sticker' with all required fields.
mkSticker :: Data.Text.Internal.Text -- ^ 'fileId'
  -> Data.Text.Internal.Text -- ^ 'fileUniqueId'
  -> GHC.Int.Int64 -- ^ 'height'
  -> GHC.Types.Bool -- ^ 'isAnimated'
  -> GHC.Int.Int64 -- ^ 'width'
  -> Sticker
mkSticker fileId fileUniqueId height isAnimated width = Sticker{emoji = GHC.Maybe.Nothing,
                                                                fileId = fileId,
                                                                fileSize = GHC.Maybe.Nothing,
                                                                fileUniqueId = fileUniqueId,
                                                                height = height,
                                                                isAnimated = isAnimated,
                                                                maskPosition = GHC.Maybe.Nothing,
                                                                setName = GHC.Maybe.Nothing,
                                                                thumb = GHC.Maybe.Nothing,
                                                                width = width}
