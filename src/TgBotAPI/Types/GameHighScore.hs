-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema GameHighScore
module TgBotAPI.Types.GameHighScore where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.User (User)

-- | Defines the object schema located at @components.schemas.GameHighScore@ in the specification.
-- 
-- This object represents one row of the high scores table for a game.
data GameHighScore = GameHighScore {
  -- | position: Position in high score table for the game
  position :: GHC.Int.Int64
  -- | score: Score
  , score :: GHC.Int.Int64
  -- | user: This object represents a Telegram user or bot.
  , user :: User
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GameHighScore
    where toJSON obj = Data.Aeson.Types.Internal.object ("position" Data.Aeson.Types.ToJSON..= position obj : "score" Data.Aeson.Types.ToJSON..= score obj : "user" Data.Aeson.Types.ToJSON..= user obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("position" Data.Aeson.Types.ToJSON..= position obj) GHC.Base.<> (("score" Data.Aeson.Types.ToJSON..= score obj) GHC.Base.<> ("user" Data.Aeson.Types.ToJSON..= user obj)))
instance Data.Aeson.Types.FromJSON.FromJSON GameHighScore
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GameHighScore" (\obj -> ((GHC.Base.pure GameHighScore GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "position")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user"))
-- | Create a new 'GameHighScore' with all required fields.
mkGameHighScore :: GHC.Int.Int64 -- ^ 'position'
  -> GHC.Int.Int64 -- ^ 'score'
  -> User -- ^ 'user'
  -> GameHighScore
mkGameHighScore position score user = GameHighScore{position = position,
                                                    score = score,
                                                    user = user}
