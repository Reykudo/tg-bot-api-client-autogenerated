-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema InlineKeyboardButton
module TgBotAPI.Types.InlineKeyboardButton where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.LoginUrl (LoginUrl)

-- | Defines the object schema located at @components.schemas.InlineKeyboardButton@ in the specification.
-- 
-- This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
data InlineKeyboardButton = InlineKeyboardButton {
  -- | callback_data: *Optional*. Data to be sent in a [callback query](https:\/\/core.telegram.org\/bots\/api\/\#callbackquery) to the bot when button is pressed, 1-64 bytes
  callbackData :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | callback_game: A placeholder, currently holds no information. Use [BotFather](https:\/\/t.me\/botfather) to set up your game.
  , callbackGame :: (GHC.Maybe.Maybe CallbackGame)
  -- | login_url: This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https:\/\/core.telegram.org\/widgets\/login) when the user is coming from Telegram. All the user needs to do is tap\/click a button and confirm that they want to log in:
  -- 
  -- Telegram apps support these buttons as of [version 5.7](https:\/\/telegram.org\/blog\/privacy-discussions-web-bots\#meet-seamless-web-bots).
  -- 
  -- Sample bot: [\@discussbot](https:\/\/t.me\/discussbot)
  , loginUrl :: (GHC.Maybe.Maybe LoginUrl)
  -- | pay: *Optional*. Specify True, to send a [Pay button](https:\/\/core.telegram.org\/bots\/api\/\#payments).  
  -- 
  -- **NOTE:** This type of button **must** always be the first button in the first row.
  , pay :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | switch_inline_query: *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot\'s username and the specified inline query in the input field. Can be empty, in which case just the bot\'s username will be inserted.  
  -- 
  -- **Note:** This offers an easy way for users to start using your bot in [inline mode](\/bots\/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\\_pm…*](https:\/\/core.telegram.org\/bots\/api\/\#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
  , switchInlineQuery :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | switch_inline_query_current_chat: *Optional*. If set, pressing the button will insert the bot\'s username and the specified inline query in the current chat\'s input field. Can be empty, in which case only the bot\'s username will be inserted.  
  -- 
  -- This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
  , switchInlineQueryCurrentChat :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | text: Label text on the button
  , text :: Data.Text.Internal.Text
  -- | url: *Optional*. HTTP or tg:\/\/ url to be opened when button is pressed
  , url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InlineKeyboardButton
    where toJSON obj = Data.Aeson.Types.Internal.object ("callback_data" Data.Aeson.Types.ToJSON..= callbackData obj : "callback_game" Data.Aeson.Types.ToJSON..= callbackGame obj : "login_url" Data.Aeson.Types.ToJSON..= loginUrl obj : "pay" Data.Aeson.Types.ToJSON..= pay obj : "switch_inline_query" Data.Aeson.Types.ToJSON..= switchInlineQuery obj : "switch_inline_query_current_chat" Data.Aeson.Types.ToJSON..= switchInlineQueryCurrentChat obj : "text" Data.Aeson.Types.ToJSON..= text obj : "url" Data.Aeson.Types.ToJSON..= url obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("callback_data" Data.Aeson.Types.ToJSON..= callbackData obj) GHC.Base.<> (("callback_game" Data.Aeson.Types.ToJSON..= callbackGame obj) GHC.Base.<> (("login_url" Data.Aeson.Types.ToJSON..= loginUrl obj) GHC.Base.<> (("pay" Data.Aeson.Types.ToJSON..= pay obj) GHC.Base.<> (("switch_inline_query" Data.Aeson.Types.ToJSON..= switchInlineQuery obj) GHC.Base.<> (("switch_inline_query_current_chat" Data.Aeson.Types.ToJSON..= switchInlineQueryCurrentChat obj) GHC.Base.<> (("text" Data.Aeson.Types.ToJSON..= text obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= url obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON InlineKeyboardButton
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InlineKeyboardButton" (\obj -> (((((((GHC.Base.pure InlineKeyboardButton GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "callback_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "callback_game")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "login_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "switch_inline_query")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "switch_inline_query_current_chat")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
-- | Create a new 'InlineKeyboardButton' with all required fields.
mkInlineKeyboardButton :: Data.Text.Internal.Text -- ^ 'text'
  -> InlineKeyboardButton
mkInlineKeyboardButton text = InlineKeyboardButton{callbackData = GHC.Maybe.Nothing,
                                                   callbackGame = GHC.Maybe.Nothing,
                                                   loginUrl = GHC.Maybe.Nothing,
                                                   pay = GHC.Maybe.Nothing,
                                                   switchInlineQuery = GHC.Maybe.Nothing,
                                                   switchInlineQueryCurrentChat = GHC.Maybe.Nothing,
                                                   text = text,
                                                   url = GHC.Maybe.Nothing}
