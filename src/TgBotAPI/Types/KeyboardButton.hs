-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema KeyboardButton
module TgBotAPI.Types.KeyboardButton where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.KeyboardButtonPollType (KeyboardButtonPollType)

-- | Defines the object schema located at @components.schemas.KeyboardButton@ in the specification.
-- 
-- This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\\_contact*, *request\\_location*, and *request\\_poll* are mutually exclusive.
data KeyboardButton = KeyboardButton {
  -- | request_contact: *Optional*. If *True*, the user\'s phone number will be sent as a contact when the button is pressed. Available in private chats only
  requestContact :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | request_location: *Optional*. If *True*, the user\'s current location will be sent when the button is pressed. Available in private chats only
  , requestLocation :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | request_poll: This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
  , requestPoll :: (GHC.Maybe.Maybe KeyboardButtonPollType)
  -- | text: Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
  , text :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON KeyboardButton
    where toJSON obj = Data.Aeson.Types.Internal.object ("request_contact" Data.Aeson.Types.ToJSON..= requestContact obj : "request_location" Data.Aeson.Types.ToJSON..= requestLocation obj : "request_poll" Data.Aeson.Types.ToJSON..= requestPoll obj : "text" Data.Aeson.Types.ToJSON..= text obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("request_contact" Data.Aeson.Types.ToJSON..= requestContact obj) GHC.Base.<> (("request_location" Data.Aeson.Types.ToJSON..= requestLocation obj) GHC.Base.<> (("request_poll" Data.Aeson.Types.ToJSON..= requestPoll obj) GHC.Base.<> ("text" Data.Aeson.Types.ToJSON..= text obj))))
instance Data.Aeson.Types.FromJSON.FromJSON KeyboardButton
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "KeyboardButton" (\obj -> (((GHC.Base.pure KeyboardButton GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request_contact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request_location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request_poll")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "text"))
-- | Create a new 'KeyboardButton' with all required fields.
mkKeyboardButton :: Data.Text.Internal.Text -- ^ 'text'
  -> KeyboardButton
mkKeyboardButton text = KeyboardButton{requestContact = GHC.Maybe.Nothing,
                                       requestLocation = GHC.Maybe.Nothing,
                                       requestPoll = GHC.Maybe.Nothing,
                                       text = text}
