-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema User
module TgBotAPI.Types.User where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.User@ in the specification.
-- 
-- This object represents a Telegram user or bot.
data User = User {
  -- | can_join_groups: *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https:\/\/core.telegram.org\/bots\/api\/\#getme).
  userCanJoinGroups :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_read_all_group_messages: *Optional*. True, if [privacy mode](https:\/\/core.telegram.org\/bots\#privacy-mode) is disabled for the bot. Returned only in [getMe](https:\/\/core.telegram.org\/bots\/api\/\#getme).
  , userCanReadAllGroupMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | first_name: User\'s or bot\'s first name
  , userFirstName :: Data.Text.Internal.Text
  -- | id: Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty\/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
  , userId :: GHC.Types.Int
  -- | is_bot: True, if this user is a bot
  , userIsBot :: GHC.Types.Bool
  -- | language_code: *Optional*. [IETF language tag](https:\/\/en.wikipedia.org\/wiki\/IETF_language_tag) of the user\'s language
  , userLanguageCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | last_name: *Optional*. User\'s or bot\'s last name
  , userLastName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | supports_inline_queries: *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https:\/\/core.telegram.org\/bots\/api\/\#getme).
  , userSupportsInlineQueries :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | username: *Optional*. User\'s or bot\'s username
  , userUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON User
    where toJSON obj = Data.Aeson.Types.Internal.object ("can_join_groups" Data.Aeson.Types.ToJSON..= userCanJoinGroups obj : "can_read_all_group_messages" Data.Aeson.Types.ToJSON..= userCanReadAllGroupMessages obj : "first_name" Data.Aeson.Types.ToJSON..= userFirstName obj : "id" Data.Aeson.Types.ToJSON..= userId obj : "is_bot" Data.Aeson.Types.ToJSON..= userIsBot obj : "language_code" Data.Aeson.Types.ToJSON..= userLanguageCode obj : "last_name" Data.Aeson.Types.ToJSON..= userLastName obj : "supports_inline_queries" Data.Aeson.Types.ToJSON..= userSupportsInlineQueries obj : "username" Data.Aeson.Types.ToJSON..= userUsername obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("can_join_groups" Data.Aeson.Types.ToJSON..= userCanJoinGroups obj) GHC.Base.<> (("can_read_all_group_messages" Data.Aeson.Types.ToJSON..= userCanReadAllGroupMessages obj) GHC.Base.<> (("first_name" Data.Aeson.Types.ToJSON..= userFirstName obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= userId obj) GHC.Base.<> (("is_bot" Data.Aeson.Types.ToJSON..= userIsBot obj) GHC.Base.<> (("language_code" Data.Aeson.Types.ToJSON..= userLanguageCode obj) GHC.Base.<> (("last_name" Data.Aeson.Types.ToJSON..= userLastName obj) GHC.Base.<> (("supports_inline_queries" Data.Aeson.Types.ToJSON..= userSupportsInlineQueries obj) GHC.Base.<> ("username" Data.Aeson.Types.ToJSON..= userUsername obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON User
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "User" (\obj -> ((((((((GHC.Base.pure User GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_join_groups")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_read_all_group_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_bot")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "language_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "supports_inline_queries")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username"))
-- | Create a new 'User' with all required fields.
mkUser :: Data.Text.Internal.Text -- ^ 'userFirstName'
  -> GHC.Types.Int -- ^ 'userId'
  -> GHC.Types.Bool -- ^ 'userIsBot'
  -> User
mkUser userFirstName userId userIsBot = User{userCanJoinGroups = GHC.Maybe.Nothing,
                                             userCanReadAllGroupMessages = GHC.Maybe.Nothing,
                                             userFirstName = userFirstName,
                                             userId = userId,
                                             userIsBot = userIsBot,
                                             userLanguageCode = GHC.Maybe.Nothing,
                                             userLastName = GHC.Maybe.Nothing,
                                             userSupportsInlineQueries = GHC.Maybe.Nothing,
                                             userUsername = GHC.Maybe.Nothing}
