-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema Venue
module TgBotAPI.Types.Venue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.Location (Location)

-- | Defines the object schema located at @components.schemas.Venue@ in the specification.
-- 
-- This object represents a venue.
data Venue = Venue {
  -- | address: Address of the venue
  address :: Data.Text.Internal.Text
  -- | foursquare_id: *Optional*. Foursquare identifier of the venue
  , foursquareId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | foursquare_type: *Optional*. Foursquare type of the venue. (For example, “arts\\_entertainment\/default”, “arts\\_entertainment\/aquarium” or “food\/icecream”.)
  , foursquareType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | google_place_id: *Optional*. Google Places identifier of the venue
  , googlePlaceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | google_place_type: *Optional*. Google Places type of the venue. (See [supported types](https:\/\/developers.google.com\/places\/web-service\/supported_types).)
  , googlePlaceType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | location: This object represents a point on the map.
  , location :: Location
  -- | title: Name of the venue
  , title :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Venue
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= address obj : "foursquare_id" Data.Aeson.Types.ToJSON..= foursquareId obj : "foursquare_type" Data.Aeson.Types.ToJSON..= foursquareType obj : "google_place_id" Data.Aeson.Types.ToJSON..= googlePlaceId obj : "google_place_type" Data.Aeson.Types.ToJSON..= googlePlaceType obj : "location" Data.Aeson.Types.ToJSON..= location obj : "title" Data.Aeson.Types.ToJSON..= title obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= address obj) GHC.Base.<> (("foursquare_id" Data.Aeson.Types.ToJSON..= foursquareId obj) GHC.Base.<> (("foursquare_type" Data.Aeson.Types.ToJSON..= foursquareType obj) GHC.Base.<> (("google_place_id" Data.Aeson.Types.ToJSON..= googlePlaceId obj) GHC.Base.<> (("google_place_type" Data.Aeson.Types.ToJSON..= googlePlaceType obj) GHC.Base.<> (("location" Data.Aeson.Types.ToJSON..= location obj) GHC.Base.<> ("title" Data.Aeson.Types.ToJSON..= title obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON Venue
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Venue" (\obj -> ((((((GHC.Base.pure Venue GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "foursquare_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "foursquare_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_place_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_place_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))
-- | Create a new 'Venue' with all required fields.
mkVenue :: Data.Text.Internal.Text -- ^ 'address'
  -> Location -- ^ 'location'
  -> Data.Text.Internal.Text -- ^ 'title'
  -> Venue
mkVenue address location title = Venue{address = address,
                                       foursquareId = GHC.Maybe.Nothing,
                                       foursquareType = GHC.Maybe.Nothing,
                                       googlePlaceId = GHC.Maybe.Nothing,
                                       googlePlaceType = GHC.Maybe.Nothing,
                                       location = location,
                                       title = title}
