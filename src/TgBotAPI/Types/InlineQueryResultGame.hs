-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema InlineQueryResultGame
module TgBotAPI.Types.InlineQueryResultGame where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import {-# SOURCE #-} TgBotAPI.Types.InlineKeyboardMarkup

-- | Defines the object schema located at @components.schemas.InlineQueryResultGame@ in the specification.
-- 
-- Represents a [Game](https:\/\/core.telegram.org\/bots\/api\/\#games).
data InlineQueryResultGame = InlineQueryResultGame {
  -- | game_short_name: Short name of the game
  inlineQueryResultGameGameShortName :: Data.Text.Internal.Text
  -- | id: Unique identifier for this result, 1-64 bytes
  , inlineQueryResultGameId :: Data.Text.Internal.Text
  -- | reply_markup: This object represents an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
  , inlineQueryResultGameReplyMarkup :: (GHC.Maybe.Maybe InlineKeyboardMarkup)
  -- | type: Type of the result, must be *game*
  , inlineQueryResultGameType :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InlineQueryResultGame
    where toJSON obj = Data.Aeson.Types.Internal.object ("game_short_name" Data.Aeson.Types.ToJSON..= inlineQueryResultGameGameShortName obj : "id" Data.Aeson.Types.ToJSON..= inlineQueryResultGameId obj : "reply_markup" Data.Aeson.Types.ToJSON..= inlineQueryResultGameReplyMarkup obj : "type" Data.Aeson.Types.ToJSON..= inlineQueryResultGameType obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("game_short_name" Data.Aeson.Types.ToJSON..= inlineQueryResultGameGameShortName obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= inlineQueryResultGameId obj) GHC.Base.<> (("reply_markup" Data.Aeson.Types.ToJSON..= inlineQueryResultGameReplyMarkup obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= inlineQueryResultGameType obj))))
instance Data.Aeson.Types.FromJSON.FromJSON InlineQueryResultGame
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InlineQueryResultGame" (\obj -> (((GHC.Base.pure InlineQueryResultGame GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "game_short_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'InlineQueryResultGame' with all required fields.
mkInlineQueryResultGame :: Data.Text.Internal.Text -- ^ 'inlineQueryResultGameGameShortName'
  -> Data.Text.Internal.Text -- ^ 'inlineQueryResultGameId'
  -> Data.Text.Internal.Text -- ^ 'inlineQueryResultGameType'
  -> InlineQueryResultGame
mkInlineQueryResultGame inlineQueryResultGameGameShortName inlineQueryResultGameId inlineQueryResultGameType = InlineQueryResultGame{inlineQueryResultGameGameShortName = inlineQueryResultGameGameShortName,
                                                                                                                                     inlineQueryResultGameId = inlineQueryResultGameId,
                                                                                                                                     inlineQueryResultGameReplyMarkup = GHC.Maybe.Nothing,
                                                                                                                                     inlineQueryResultGameType = inlineQueryResultGameType}
