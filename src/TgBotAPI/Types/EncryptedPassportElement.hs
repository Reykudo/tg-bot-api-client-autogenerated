-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema EncryptedPassportElement
module TgBotAPI.Types.EncryptedPassportElement where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.PassportFile (PassportFile)

-- | Defines the object schema located at @components.schemas.EncryptedPassportElement@ in the specification.
-- 
-- Contains information about documents or other Telegram Passport elements shared with the bot by the user.
data EncryptedPassportElement = EncryptedPassportElement {
  -- | data: *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https:\/\/core.telegram.org\/bots\/api\/\#encryptedcredentials).
  data' :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | email: *Optional*. User\'s verified email address, available only for “email” type
  , email :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | files: *Optional*. Array of encrypted files with documents provided by the user, available for “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https:\/\/core.telegram.org\/bots\/api\/\#encryptedcredentials).
  , files :: (GHC.Maybe.Maybe ([PassportFile]))
  -- | front_side: This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don\'t exceed 10MB.
  , frontSide :: (GHC.Maybe.Maybe PassportFile)
  -- | hash: Base64-encoded element hash for using in [PassportElementErrorUnspecified](https:\/\/core.telegram.org\/bots\/api\/\#passportelementerrorunspecified)
  , hash :: Data.Text.Internal.Text
  -- | phone_number: *Optional*. User\'s verified phone number, available only for “phone\\_number” type
  , phoneNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reverse_side: This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don\'t exceed 10MB.
  , reverseSide :: (GHC.Maybe.Maybe PassportFile)
  -- | selfie: This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don\'t exceed 10MB.
  , selfie :: (GHC.Maybe.Maybe PassportFile)
  -- | translation: *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration” and “temporary\\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https:\/\/core.telegram.org\/bots\/api\/\#encryptedcredentials).
  , translation :: (GHC.Maybe.Maybe ([PassportFile]))
  -- | type: Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
  , type' :: Type
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON EncryptedPassportElement
    where toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= data' obj : "email" Data.Aeson.Types.ToJSON..= email obj : "files" Data.Aeson.Types.ToJSON..= files obj : "front_side" Data.Aeson.Types.ToJSON..= frontSide obj : "hash" Data.Aeson.Types.ToJSON..= hash obj : "phone_number" Data.Aeson.Types.ToJSON..= phoneNumber obj : "reverse_side" Data.Aeson.Types.ToJSON..= reverseSide obj : "selfie" Data.Aeson.Types.ToJSON..= selfie obj : "translation" Data.Aeson.Types.ToJSON..= translation obj : "type" Data.Aeson.Types.ToJSON..= type' obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= data' obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= email obj) GHC.Base.<> (("files" Data.Aeson.Types.ToJSON..= files obj) GHC.Base.<> (("front_side" Data.Aeson.Types.ToJSON..= frontSide obj) GHC.Base.<> (("hash" Data.Aeson.Types.ToJSON..= hash obj) GHC.Base.<> (("phone_number" Data.Aeson.Types.ToJSON..= phoneNumber obj) GHC.Base.<> (("reverse_side" Data.Aeson.Types.ToJSON..= reverseSide obj) GHC.Base.<> (("selfie" Data.Aeson.Types.ToJSON..= selfie obj) GHC.Base.<> (("translation" Data.Aeson.Types.ToJSON..= translation obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= type' obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON EncryptedPassportElement
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EncryptedPassportElement" (\obj -> (((((((((GHC.Base.pure EncryptedPassportElement GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "files")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front_side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reverse_side")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "selfie")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "translation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'EncryptedPassportElement' with all required fields.
mkEncryptedPassportElement :: Data.Text.Internal.Text -- ^ 'hash'
  -> Type -- ^ 'type''
  -> EncryptedPassportElement
mkEncryptedPassportElement hash type' = EncryptedPassportElement{data' = GHC.Maybe.Nothing,
                                                                 email = GHC.Maybe.Nothing,
                                                                 files = GHC.Maybe.Nothing,
                                                                 frontSide = GHC.Maybe.Nothing,
                                                                 hash = hash,
                                                                 phoneNumber = GHC.Maybe.Nothing,
                                                                 reverseSide = GHC.Maybe.Nothing,
                                                                 selfie = GHC.Maybe.Nothing,
                                                                 translation = GHC.Maybe.Nothing,
                                                                 type' = type'}
-- | Defines the enum schema located at @components.schemas.EncryptedPassportElement.properties.type@ in the specification.
-- 
-- Element type. One of “personal\\_details”, “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “address”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”, “phone\\_number”, “email”.
data Type =
   TypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TypeEnumPersonalDetails -- ^ Represents the JSON value @"personal_details"@
  | TypeEnumPassport -- ^ Represents the JSON value @"passport"@
  | TypeEnumDriverLicense -- ^ Represents the JSON value @"driver_license"@
  | TypeEnumIdentityCard -- ^ Represents the JSON value @"identity_card"@
  | TypeEnumInternalPassport -- ^ Represents the JSON value @"internal_passport"@
  | TypeEnumAddress -- ^ Represents the JSON value @"address"@
  | TypeEnumUtilityBill -- ^ Represents the JSON value @"utility_bill"@
  | TypeEnumBankStatement -- ^ Represents the JSON value @"bank_statement"@
  | TypeEnumRentalAgreement -- ^ Represents the JSON value @"rental_agreement"@
  | TypeEnumPassportRegistration -- ^ Represents the JSON value @"passport_registration"@
  | TypeEnumTemporaryRegistration -- ^ Represents the JSON value @"temporary_registration"@
  | TypeEnumPhoneNumber -- ^ Represents the JSON value @"phone_number"@
  | TypeEnumEmail -- ^ Represents the JSON value @"email"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Type
    where toJSON (TypeOther val) = val
          toJSON (TypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (TypeEnumPersonalDetails) = "personal_details"
          toJSON (TypeEnumPassport) = "passport"
          toJSON (TypeEnumDriverLicense) = "driver_license"
          toJSON (TypeEnumIdentityCard) = "identity_card"
          toJSON (TypeEnumInternalPassport) = "internal_passport"
          toJSON (TypeEnumAddress) = "address"
          toJSON (TypeEnumUtilityBill) = "utility_bill"
          toJSON (TypeEnumBankStatement) = "bank_statement"
          toJSON (TypeEnumRentalAgreement) = "rental_agreement"
          toJSON (TypeEnumPassportRegistration) = "passport_registration"
          toJSON (TypeEnumTemporaryRegistration) = "temporary_registration"
          toJSON (TypeEnumPhoneNumber) = "phone_number"
          toJSON (TypeEnumEmail) = "email"
instance Data.Aeson.Types.FromJSON.FromJSON Type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "personal_details" -> TypeEnumPersonalDetails
                                            | val GHC.Classes.== "passport" -> TypeEnumPassport
                                            | val GHC.Classes.== "driver_license" -> TypeEnumDriverLicense
                                            | val GHC.Classes.== "identity_card" -> TypeEnumIdentityCard
                                            | val GHC.Classes.== "internal_passport" -> TypeEnumInternalPassport
                                            | val GHC.Classes.== "address" -> TypeEnumAddress
                                            | val GHC.Classes.== "utility_bill" -> TypeEnumUtilityBill
                                            | val GHC.Classes.== "bank_statement" -> TypeEnumBankStatement
                                            | val GHC.Classes.== "rental_agreement" -> TypeEnumRentalAgreement
                                            | val GHC.Classes.== "passport_registration" -> TypeEnumPassportRegistration
                                            | val GHC.Classes.== "temporary_registration" -> TypeEnumTemporaryRegistration
                                            | val GHC.Classes.== "phone_number" -> TypeEnumPhoneNumber
                                            | val GHC.Classes.== "email" -> TypeEnumEmail
                                            | GHC.Base.otherwise -> TypeOther val)
