-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema Poll
module TgBotAPI.Types.Poll where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.MessageEntity (MessageEntity)
import  {-# SOURCE #-}  TgBotAPI.Types.PollOption (PollOption)

-- | Defines the object schema located at @components.schemas.Poll@ in the specification.
-- 
-- This object contains information about a poll.
data Poll = Poll {
  -- | allows_multiple_answers: True, if the poll allows multiple answers
  allowsMultipleAnswers :: GHC.Types.Bool
  -- | close_date: *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
  , closeDate :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | correct_option_id: *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
  , correctOptionId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | explanation: *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
  , explanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | explanation_entities: *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
  , explanationEntities :: (GHC.Maybe.Maybe ([MessageEntity]))
  -- | id: Unique poll identifier
  , id :: Data.Text.Internal.Text
  -- | is_anonymous: True, if the poll is anonymous
  , isAnonymous :: GHC.Types.Bool
  -- | is_closed: True, if the poll is closed
  , isClosed :: GHC.Types.Bool
  -- | open_period: *Optional*. Amount of time in seconds the poll will be active after creation
  , openPeriod :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | options: List of poll options
  , options :: ([PollOption])
  -- | question: Poll question, 1-300 characters
  , question :: Data.Text.Internal.Text
  -- | total_voter_count: Total number of users that voted in the poll
  , totalVoterCount :: GHC.Types.Int
  -- | type: Poll type, currently can be “regular” or “quiz”
  , type' :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Poll
    where toJSON obj = Data.Aeson.Types.Internal.object ("allows_multiple_answers" Data.Aeson.Types.ToJSON..= allowsMultipleAnswers obj : "close_date" Data.Aeson.Types.ToJSON..= closeDate obj : "correct_option_id" Data.Aeson.Types.ToJSON..= correctOptionId obj : "explanation" Data.Aeson.Types.ToJSON..= explanation obj : "explanation_entities" Data.Aeson.Types.ToJSON..= explanationEntities obj : "id" Data.Aeson.Types.ToJSON..= id obj : "is_anonymous" Data.Aeson.Types.ToJSON..= isAnonymous obj : "is_closed" Data.Aeson.Types.ToJSON..= isClosed obj : "open_period" Data.Aeson.Types.ToJSON..= openPeriod obj : "options" Data.Aeson.Types.ToJSON..= options obj : "question" Data.Aeson.Types.ToJSON..= question obj : "total_voter_count" Data.Aeson.Types.ToJSON..= totalVoterCount obj : "type" Data.Aeson.Types.ToJSON..= type' obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("allows_multiple_answers" Data.Aeson.Types.ToJSON..= allowsMultipleAnswers obj) GHC.Base.<> (("close_date" Data.Aeson.Types.ToJSON..= closeDate obj) GHC.Base.<> (("correct_option_id" Data.Aeson.Types.ToJSON..= correctOptionId obj) GHC.Base.<> (("explanation" Data.Aeson.Types.ToJSON..= explanation obj) GHC.Base.<> (("explanation_entities" Data.Aeson.Types.ToJSON..= explanationEntities obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= id obj) GHC.Base.<> (("is_anonymous" Data.Aeson.Types.ToJSON..= isAnonymous obj) GHC.Base.<> (("is_closed" Data.Aeson.Types.ToJSON..= isClosed obj) GHC.Base.<> (("open_period" Data.Aeson.Types.ToJSON..= openPeriod obj) GHC.Base.<> (("options" Data.Aeson.Types.ToJSON..= options obj) GHC.Base.<> (("question" Data.Aeson.Types.ToJSON..= question obj) GHC.Base.<> (("total_voter_count" Data.Aeson.Types.ToJSON..= totalVoterCount obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= type' obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Poll
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Poll" (\obj -> ((((((((((((GHC.Base.pure Poll GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "allows_multiple_answers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "close_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "correct_option_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "explanation_entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_anonymous")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_closed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "open_period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "question")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_voter_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'Poll' with all required fields.
mkPoll :: GHC.Types.Bool -- ^ 'allowsMultipleAnswers'
  -> Data.Text.Internal.Text -- ^ 'id'
  -> GHC.Types.Bool -- ^ 'isAnonymous'
  -> GHC.Types.Bool -- ^ 'isClosed'
  -> [PollOption] -- ^ 'options'
  -> Data.Text.Internal.Text -- ^ 'question'
  -> GHC.Types.Int -- ^ 'totalVoterCount'
  -> Data.Text.Internal.Text -- ^ 'type''
  -> Poll
mkPoll allowsMultipleAnswers id isAnonymous isClosed options question totalVoterCount type' = Poll{allowsMultipleAnswers = allowsMultipleAnswers,
                                                                                                   closeDate = GHC.Maybe.Nothing,
                                                                                                   correctOptionId = GHC.Maybe.Nothing,
                                                                                                   explanation = GHC.Maybe.Nothing,
                                                                                                   explanationEntities = GHC.Maybe.Nothing,
                                                                                                   id = id,
                                                                                                   isAnonymous = isAnonymous,
                                                                                                   isClosed = isClosed,
                                                                                                   openPeriod = GHC.Maybe.Nothing,
                                                                                                   options = options,
                                                                                                   question = question,
                                                                                                   totalVoterCount = totalVoterCount,
                                                                                                   type' = type'}
