-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema PassportElementErrorTranslationFiles
module TgBotAPI.Types.PassportElementErrorTranslationFiles where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.PassportElementErrorTranslationFiles@ in the specification.
-- 
-- Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
data PassportElementErrorTranslationFiles = PassportElementErrorTranslationFiles {
  -- | file_hashes: List of base64-encoded file hashes
  fileHashes :: ([Data.Text.Internal.Text])
  -- | message: Error message
  , message :: Data.Text.Internal.Text
  -- | source: Error source, must be *translation\\_files*
  , source :: Data.Text.Internal.Text
  -- | type: Type of element of the user\'s Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”
  , type' :: Type
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PassportElementErrorTranslationFiles
    where toJSON obj = Data.Aeson.Types.Internal.object ("file_hashes" Data.Aeson.Types.ToJSON..= fileHashes obj : "message" Data.Aeson.Types.ToJSON..= message obj : "source" Data.Aeson.Types.ToJSON..= source obj : "type" Data.Aeson.Types.ToJSON..= type' obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("file_hashes" Data.Aeson.Types.ToJSON..= fileHashes obj) GHC.Base.<> (("message" Data.Aeson.Types.ToJSON..= message obj) GHC.Base.<> (("source" Data.Aeson.Types.ToJSON..= source obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= type' obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PassportElementErrorTranslationFiles
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PassportElementErrorTranslationFiles" (\obj -> (((GHC.Base.pure PassportElementErrorTranslationFiles GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_hashes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PassportElementErrorTranslationFiles' with all required fields.
mkPassportElementErrorTranslationFiles :: [Data.Text.Internal.Text] -- ^ 'fileHashes'
  -> Data.Text.Internal.Text -- ^ 'message'
  -> Data.Text.Internal.Text -- ^ 'source'
  -> Type -- ^ 'type''
  -> PassportElementErrorTranslationFiles
mkPassportElementErrorTranslationFiles fileHashes message source type' = PassportElementErrorTranslationFiles{fileHashes = fileHashes,
                                                                                                              message = message,
                                                                                                              source = source,
                                                                                                              type' = type'}
-- | Defines the enum schema located at @components.schemas.PassportElementErrorTranslationFiles.properties.type@ in the specification.
-- 
-- Type of element of the user\'s Telegram Passport which has the issue, one of “passport”, “driver\\_license”, “identity\\_card”, “internal\\_passport”, “utility\\_bill”, “bank\\_statement”, “rental\\_agreement”, “passport\\_registration”, “temporary\\_registration”
data Type =
   TypeOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | TypeTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | TypeEnumPassport -- ^ Represents the JSON value @"passport"@
  | TypeEnumDriverLicense -- ^ Represents the JSON value @"driver_license"@
  | TypeEnumIdentityCard -- ^ Represents the JSON value @"identity_card"@
  | TypeEnumInternalPassport -- ^ Represents the JSON value @"internal_passport"@
  | TypeEnumUtilityBill -- ^ Represents the JSON value @"utility_bill"@
  | TypeEnumBankStatement -- ^ Represents the JSON value @"bank_statement"@
  | TypeEnumRentalAgreement -- ^ Represents the JSON value @"rental_agreement"@
  | TypeEnumPassportRegistration -- ^ Represents the JSON value @"passport_registration"@
  | TypeEnumTemporaryRegistration -- ^ Represents the JSON value @"temporary_registration"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Type
    where toJSON (TypeOther val) = val
          toJSON (TypeTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (TypeEnumPassport) = "passport"
          toJSON (TypeEnumDriverLicense) = "driver_license"
          toJSON (TypeEnumIdentityCard) = "identity_card"
          toJSON (TypeEnumInternalPassport) = "internal_passport"
          toJSON (TypeEnumUtilityBill) = "utility_bill"
          toJSON (TypeEnumBankStatement) = "bank_statement"
          toJSON (TypeEnumRentalAgreement) = "rental_agreement"
          toJSON (TypeEnumPassportRegistration) = "passport_registration"
          toJSON (TypeEnumTemporaryRegistration) = "temporary_registration"
instance Data.Aeson.Types.FromJSON.FromJSON Type
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "passport" -> TypeEnumPassport
                                            | val GHC.Classes.== "driver_license" -> TypeEnumDriverLicense
                                            | val GHC.Classes.== "identity_card" -> TypeEnumIdentityCard
                                            | val GHC.Classes.== "internal_passport" -> TypeEnumInternalPassport
                                            | val GHC.Classes.== "utility_bill" -> TypeEnumUtilityBill
                                            | val GHC.Classes.== "bank_statement" -> TypeEnumBankStatement
                                            | val GHC.Classes.== "rental_agreement" -> TypeEnumRentalAgreement
                                            | val GHC.Classes.== "passport_registration" -> TypeEnumPassportRegistration
                                            | val GHC.Classes.== "temporary_registration" -> TypeEnumTemporaryRegistration
                                            | GHC.Base.otherwise -> TypeOther val)
