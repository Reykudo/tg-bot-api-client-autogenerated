-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Video
module TgBotAPI.Types.Video where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import {-# SOURCE #-} TgBotAPI.Types.PhotoSize

-- | Defines the object schema located at @components.schemas.Video@ in the specification.
-- 
-- This object represents a video file.
data Video = Video {
  -- | duration: Duration of the video in seconds as defined by sender
  videoDuration :: GHC.Types.Int
  -- | file_id: Identifier for this file, which can be used to download or reuse the file
  , videoFileId :: Data.Text.Internal.Text
  -- | file_name: *Optional*. Original filename as defined by sender
  , videoFileName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | file_size: *Optional*. File size
  , videoFileSize :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | file_unique_id: Unique identifier for this file, which is supposed to be the same over time and for different bots. Can\'t be used to download or reuse the file.
  , videoFileUniqueId :: Data.Text.Internal.Text
  -- | height: Video height as defined by sender
  , videoHeight :: GHC.Types.Int
  -- | mime_type: *Optional*. Mime type of a file as defined by sender
  , videoMimeType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | thumb: This object represents one size of a photo or a [file](https:\/\/core.telegram.org\/bots\/api\/\#document) \/ [sticker](https:\/\/core.telegram.org\/bots\/api\/\#sticker) thumbnail.
  , videoThumb :: (GHC.Maybe.Maybe PhotoSize)
  -- | width: Video width as defined by sender
  , videoWidth :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Video
    where toJSON obj = Data.Aeson.Types.Internal.object ("duration" Data.Aeson.Types.ToJSON..= videoDuration obj : "file_id" Data.Aeson.Types.ToJSON..= videoFileId obj : "file_name" Data.Aeson.Types.ToJSON..= videoFileName obj : "file_size" Data.Aeson.Types.ToJSON..= videoFileSize obj : "file_unique_id" Data.Aeson.Types.ToJSON..= videoFileUniqueId obj : "height" Data.Aeson.Types.ToJSON..= videoHeight obj : "mime_type" Data.Aeson.Types.ToJSON..= videoMimeType obj : "thumb" Data.Aeson.Types.ToJSON..= videoThumb obj : "width" Data.Aeson.Types.ToJSON..= videoWidth obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("duration" Data.Aeson.Types.ToJSON..= videoDuration obj) GHC.Base.<> (("file_id" Data.Aeson.Types.ToJSON..= videoFileId obj) GHC.Base.<> (("file_name" Data.Aeson.Types.ToJSON..= videoFileName obj) GHC.Base.<> (("file_size" Data.Aeson.Types.ToJSON..= videoFileSize obj) GHC.Base.<> (("file_unique_id" Data.Aeson.Types.ToJSON..= videoFileUniqueId obj) GHC.Base.<> (("height" Data.Aeson.Types.ToJSON..= videoHeight obj) GHC.Base.<> (("mime_type" Data.Aeson.Types.ToJSON..= videoMimeType obj) GHC.Base.<> (("thumb" Data.Aeson.Types.ToJSON..= videoThumb obj) GHC.Base.<> ("width" Data.Aeson.Types.ToJSON..= videoWidth obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Video
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Video" (\obj -> ((((((((GHC.Base.pure Video GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "duration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "file_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "file_size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file_unique_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mime_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "width"))
-- | Create a new 'Video' with all required fields.
mkVideo :: GHC.Types.Int -- ^ 'videoDuration'
  -> Data.Text.Internal.Text -- ^ 'videoFileId'
  -> Data.Text.Internal.Text -- ^ 'videoFileUniqueId'
  -> GHC.Types.Int -- ^ 'videoHeight'
  -> GHC.Types.Int -- ^ 'videoWidth'
  -> Video
mkVideo videoDuration videoFileId videoFileUniqueId videoHeight videoWidth = Video{videoDuration = videoDuration,
                                                                                   videoFileId = videoFileId,
                                                                                   videoFileName = GHC.Maybe.Nothing,
                                                                                   videoFileSize = GHC.Maybe.Nothing,
                                                                                   videoFileUniqueId = videoFileUniqueId,
                                                                                   videoHeight = videoHeight,
                                                                                   videoMimeType = GHC.Maybe.Nothing,
                                                                                   videoThumb = GHC.Maybe.Nothing,
                                                                                   videoWidth = videoWidth}
