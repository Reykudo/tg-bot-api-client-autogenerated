-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the types generated from the schema InlineQueryResultVenue
module TgBotAPI.Types.InlineQueryResultVenue where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified TgBotAPI.Common
import TgBotAPI.TypeAlias
import  {-# SOURCE #-}  TgBotAPI.Types.InlineKeyboardMarkup (InlineKeyboardMarkup)
import  {-# SOURCE #-}  TgBotAPI.Types.InputMessageContent (InputMessageContent)

-- | Defines the object schema located at @components.schemas.InlineQueryResultVenue@ in the specification.
-- 
-- Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\\_message\\_content* to send a message with the specified content instead of the venue.
data InlineQueryResultVenue = InlineQueryResultVenue {
  -- | address: Address of the venue
  address :: Data.Text.Internal.Text
  -- | foursquare_id: *Optional*. Foursquare identifier of the venue if known
  , foursquareId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | foursquare_type: *Optional*. Foursquare type of the venue, if known. (For example, “arts\\_entertainment\/default”, “arts\\_entertainment\/aquarium” or “food\/icecream”.)
  , foursquareType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | google_place_id: *Optional*. Google Places identifier of the venue
  , googlePlaceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | google_place_type: *Optional*. Google Places type of the venue. (See [supported types](https:\/\/developers.google.com\/places\/web-service\/supported_types).)
  , googlePlaceType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | id: Unique identifier for this result, 1-64 Bytes
  , id :: Data.Text.Internal.Text
  -- | input_message_content: This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:
  , inputMessageContent :: (GHC.Maybe.Maybe InputMessageContent)
  -- | latitude: Latitude of the venue location in degrees
  , latitude :: GHC.Types.Double
  -- | longitude: Longitude of the venue location in degrees
  , longitude :: GHC.Types.Double
  -- | reply_markup: This object represents an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
  , replyMarkup :: (GHC.Maybe.Maybe InlineKeyboardMarkup)
  -- | thumb_height: *Optional*. Thumbnail height
  , thumbHeight :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | thumb_url: *Optional*. Url of the thumbnail for the result
  , thumbUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | thumb_width: *Optional*. Thumbnail width
  , thumbWidth :: (GHC.Maybe.Maybe GHC.Int.Int64)
  -- | title: Title of the venue
  , title :: Data.Text.Internal.Text
  -- | type: Type of the result, must be *venue*
  , type' :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON InlineQueryResultVenue
    where toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= address obj : "foursquare_id" Data.Aeson.Types.ToJSON..= foursquareId obj : "foursquare_type" Data.Aeson.Types.ToJSON..= foursquareType obj : "google_place_id" Data.Aeson.Types.ToJSON..= googlePlaceId obj : "google_place_type" Data.Aeson.Types.ToJSON..= googlePlaceType obj : "id" Data.Aeson.Types.ToJSON..= id obj : "input_message_content" Data.Aeson.Types.ToJSON..= inputMessageContent obj : "latitude" Data.Aeson.Types.ToJSON..= latitude obj : "longitude" Data.Aeson.Types.ToJSON..= longitude obj : "reply_markup" Data.Aeson.Types.ToJSON..= replyMarkup obj : "thumb_height" Data.Aeson.Types.ToJSON..= thumbHeight obj : "thumb_url" Data.Aeson.Types.ToJSON..= thumbUrl obj : "thumb_width" Data.Aeson.Types.ToJSON..= thumbWidth obj : "title" Data.Aeson.Types.ToJSON..= title obj : "type" Data.Aeson.Types.ToJSON..= type' obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= address obj) GHC.Base.<> (("foursquare_id" Data.Aeson.Types.ToJSON..= foursquareId obj) GHC.Base.<> (("foursquare_type" Data.Aeson.Types.ToJSON..= foursquareType obj) GHC.Base.<> (("google_place_id" Data.Aeson.Types.ToJSON..= googlePlaceId obj) GHC.Base.<> (("google_place_type" Data.Aeson.Types.ToJSON..= googlePlaceType obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= id obj) GHC.Base.<> (("input_message_content" Data.Aeson.Types.ToJSON..= inputMessageContent obj) GHC.Base.<> (("latitude" Data.Aeson.Types.ToJSON..= latitude obj) GHC.Base.<> (("longitude" Data.Aeson.Types.ToJSON..= longitude obj) GHC.Base.<> (("reply_markup" Data.Aeson.Types.ToJSON..= replyMarkup obj) GHC.Base.<> (("thumb_height" Data.Aeson.Types.ToJSON..= thumbHeight obj) GHC.Base.<> (("thumb_url" Data.Aeson.Types.ToJSON..= thumbUrl obj) GHC.Base.<> (("thumb_width" Data.Aeson.Types.ToJSON..= thumbWidth obj) GHC.Base.<> (("title" Data.Aeson.Types.ToJSON..= title obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= type' obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON InlineQueryResultVenue
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InlineQueryResultVenue" (\obj -> ((((((((((((((GHC.Base.pure InlineQueryResultVenue GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "foursquare_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "foursquare_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_place_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_place_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "input_message_content")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb_height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "thumb_width")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'InlineQueryResultVenue' with all required fields.
mkInlineQueryResultVenue :: Data.Text.Internal.Text -- ^ 'address'
  -> Data.Text.Internal.Text -- ^ 'id'
  -> GHC.Types.Double -- ^ 'latitude'
  -> GHC.Types.Double -- ^ 'longitude'
  -> Data.Text.Internal.Text -- ^ 'title'
  -> Data.Text.Internal.Text -- ^ 'type''
  -> InlineQueryResultVenue
mkInlineQueryResultVenue address id latitude longitude title type' = InlineQueryResultVenue{address = address,
                                                                                            foursquareId = GHC.Maybe.Nothing,
                                                                                            foursquareType = GHC.Maybe.Nothing,
                                                                                            googlePlaceId = GHC.Maybe.Nothing,
                                                                                            googlePlaceType = GHC.Maybe.Nothing,
                                                                                            id = id,
                                                                                            inputMessageContent = GHC.Maybe.Nothing,
                                                                                            latitude = latitude,
                                                                                            longitude = longitude,
                                                                                            replyMarkup = GHC.Maybe.Nothing,
                                                                                            thumbHeight = GHC.Maybe.Nothing,
                                                                                            thumbUrl = GHC.Maybe.Nothing,
                                                                                            thumbWidth = GHC.Maybe.Nothing,
                                                                                            title = title,
                                                                                            type' = type'}
