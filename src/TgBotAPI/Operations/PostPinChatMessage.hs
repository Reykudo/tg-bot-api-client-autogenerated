-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postPinChatMessage
module TgBotAPI.Operations.PostPinChatMessage where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /pinChatMessage
-- 
-- Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the \'can\\_pin\\_messages\' admin right in a supergroup or \'can\\_edit\\_messages\' admin right in a channel. Returns *True* on success.
postPinChatMessage :: forall m . TgBotAPI.Common.MonadHTTP m => PostPinChatMessageRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostPinChatMessageResponse) -- ^ Monadic computation which returns the result of the operation
postPinChatMessage body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostPinChatMessageResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostPinChatMessageResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostPinChatMessageResponseBody200)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostPinChatMessageResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           Error)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/pinChatMessage") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/pinChatMessage.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPinChatMessageRequestBody = PostPinChatMessageRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postPinChatMessageRequestBodyChatId :: PostPinChatMessageRequestBodyChatIdVariants
  -- | disable_notification: Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
  , postPinChatMessageRequestBodyDisableNotification :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | message_id: Identifier of a message to pin
  , postPinChatMessageRequestBodyMessageId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPinChatMessageRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postPinChatMessageRequestBodyChatId obj : "disable_notification" Data.Aeson.Types.ToJSON..= postPinChatMessageRequestBodyDisableNotification obj : "message_id" Data.Aeson.Types.ToJSON..= postPinChatMessageRequestBodyMessageId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postPinChatMessageRequestBodyChatId obj) GHC.Base.<> (("disable_notification" Data.Aeson.Types.ToJSON..= postPinChatMessageRequestBodyDisableNotification obj) GHC.Base.<> ("message_id" Data.Aeson.Types.ToJSON..= postPinChatMessageRequestBodyMessageId obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostPinChatMessageRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPinChatMessageRequestBody" (\obj -> ((GHC.Base.pure PostPinChatMessageRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disable_notification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "message_id"))
-- | Create a new 'PostPinChatMessageRequestBody' with all required fields.
mkPostPinChatMessageRequestBody :: PostPinChatMessageRequestBodyChatIdVariants -- ^ 'postPinChatMessageRequestBodyChatId'
  -> GHC.Types.Int -- ^ 'postPinChatMessageRequestBodyMessageId'
  -> PostPinChatMessageRequestBody
mkPostPinChatMessageRequestBody postPinChatMessageRequestBodyChatId postPinChatMessageRequestBodyMessageId = PostPinChatMessageRequestBody{postPinChatMessageRequestBodyChatId = postPinChatMessageRequestBodyChatId,
                                                                                                                                           postPinChatMessageRequestBodyDisableNotification = GHC.Maybe.Nothing,
                                                                                                                                           postPinChatMessageRequestBodyMessageId = postPinChatMessageRequestBodyMessageId}
-- | Defines the oneOf schema located at @paths.\/pinChatMessage.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostPinChatMessageRequestBodyChatIdVariants =
   PostPinChatMessageRequestBodyChatIdInt GHC.Types.Int
  | PostPinChatMessageRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPinChatMessageRequestBodyChatIdVariants
    where toJSON (PostPinChatMessageRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostPinChatMessageRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostPinChatMessageRequestBodyChatIdVariants
    where parseJSON val = case (PostPinChatMessageRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostPinChatMessageRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postPinChatMessage'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPinChatMessageResponseError' is used.
data PostPinChatMessageResponse =
   PostPinChatMessageResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostPinChatMessageResponse200 PostPinChatMessageResponseBody200 -- ^ 
  | PostPinChatMessageResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/pinChatMessage.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPinChatMessageResponseBody200 = PostPinChatMessageResponseBody200 {
  -- | ok
  postPinChatMessageResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postPinChatMessageResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPinChatMessageResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postPinChatMessageResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postPinChatMessageResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postPinChatMessageResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postPinChatMessageResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostPinChatMessageResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPinChatMessageResponseBody200" (\obj -> (GHC.Base.pure PostPinChatMessageResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostPinChatMessageResponseBody200' with all required fields.
mkPostPinChatMessageResponseBody200 :: GHC.Types.Bool -- ^ 'postPinChatMessageResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postPinChatMessageResponseBody200Result'
  -> PostPinChatMessageResponseBody200
mkPostPinChatMessageResponseBody200 postPinChatMessageResponseBody200Ok postPinChatMessageResponseBody200Result = PostPinChatMessageResponseBody200{postPinChatMessageResponseBody200Ok = postPinChatMessageResponseBody200Ok,
                                                                                                                                                    postPinChatMessageResponseBody200Result = postPinChatMessageResponseBody200Result}
-- | > POST /pinChatMessage
-- 
-- The same as 'postPinChatMessage' but accepts an explicit configuration.
postPinChatMessageWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostPinChatMessageRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostPinChatMessageResponse) -- ^ Monadic computation which returns the result of the operation
postPinChatMessageWithConfiguration config
                                    body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostPinChatMessageResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostPinChatMessageResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          PostPinChatMessageResponseBody200)
                                                                                                                                                                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostPinChatMessageResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                            Error)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/pinChatMessage") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /pinChatMessage
-- 
-- The same as 'postPinChatMessage' but returns the raw 'Data.ByteString.Char8.ByteString'.
postPinChatMessageRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostPinChatMessageRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postPinChatMessageRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/pinChatMessage") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /pinChatMessage
-- 
-- The same as 'postPinChatMessage' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postPinChatMessageWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostPinChatMessageRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postPinChatMessageWithConfigurationRaw config
                                       body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/pinChatMessage") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
