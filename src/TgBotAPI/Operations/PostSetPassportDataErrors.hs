-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the different functions to run the operation postSetPassportDataErrors
module TgBotAPI.Operations.PostSetPassportDataErrors where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /setPassportDataErrors
-- 
-- Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
-- 
-- Use this if the data submitted by the user doesn\'t satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
postSetPassportDataErrors :: forall m . TgBotAPI.Common.MonadHTTP m => PostSetPassportDataErrorsRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSetPassportDataErrorsResponse) -- ^ Monadic computation which returns the result of the operation
postSetPassportDataErrors body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSetPassportDataErrorsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetPassportDataErrorsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                              PostSetPassportDataErrorsResponseBody200)
                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetPassportDataErrorsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                Error)
                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setPassportDataErrors") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/setPassportDataErrors.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetPassportDataErrorsRequestBody = PostSetPassportDataErrorsRequestBody {
  -- | errors: A JSON-serialized array describing the errors
  errors :: ([PassportElementError])
  -- | user_id: User identifier
  , userId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetPassportDataErrorsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("errors" Data.Aeson.Types.ToJSON..= errors obj : "user_id" Data.Aeson.Types.ToJSON..= userId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("errors" Data.Aeson.Types.ToJSON..= errors obj) GHC.Base.<> ("user_id" Data.Aeson.Types.ToJSON..= userId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetPassportDataErrorsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetPassportDataErrorsRequestBody" (\obj -> (GHC.Base.pure PostSetPassportDataErrorsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_id"))
-- | Create a new 'PostSetPassportDataErrorsRequestBody' with all required fields.
mkPostSetPassportDataErrorsRequestBody :: [PassportElementError] -- ^ 'errors'
  -> GHC.Types.Int -- ^ 'userId'
  -> PostSetPassportDataErrorsRequestBody
mkPostSetPassportDataErrorsRequestBody errors userId = PostSetPassportDataErrorsRequestBody{errors = errors,
                                                                                            userId = userId}
-- | Represents a response of the operation 'postSetPassportDataErrors'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSetPassportDataErrorsResponseError' is used.
data PostSetPassportDataErrorsResponse =
   PostSetPassportDataErrorsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSetPassportDataErrorsResponse200 PostSetPassportDataErrorsResponseBody200 -- ^ 
  | PostSetPassportDataErrorsResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/setPassportDataErrors.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetPassportDataErrorsResponseBody200 = PostSetPassportDataErrorsResponseBody200 {
  -- | ok
  ok :: GHC.Types.Bool
  -- | result
  , result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetPassportDataErrorsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= ok obj : "result" Data.Aeson.Types.ToJSON..= result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetPassportDataErrorsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetPassportDataErrorsResponseBody200" (\obj -> (GHC.Base.pure PostSetPassportDataErrorsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSetPassportDataErrorsResponseBody200' with all required fields.
mkPostSetPassportDataErrorsResponseBody200 :: GHC.Types.Bool -- ^ 'ok'
  -> GHC.Types.Bool -- ^ 'result'
  -> PostSetPassportDataErrorsResponseBody200
mkPostSetPassportDataErrorsResponseBody200 ok result = PostSetPassportDataErrorsResponseBody200{ok = ok,
                                                                                                result = result}
-- | > POST /setPassportDataErrors
-- 
-- The same as 'postSetPassportDataErrors' but accepts an explicit configuration.
postSetPassportDataErrorsWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSetPassportDataErrorsRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostSetPassportDataErrorsResponse) -- ^ Monadic computation which returns the result of the operation
postSetPassportDataErrorsWithConfiguration config
                                           body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostSetPassportDataErrorsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetPassportDataErrorsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                               PostSetPassportDataErrorsResponseBody200)
                                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetPassportDataErrorsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                 Error)
                                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setPassportDataErrors") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /setPassportDataErrors
-- 
-- The same as 'postSetPassportDataErrors' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSetPassportDataErrorsRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostSetPassportDataErrorsRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSetPassportDataErrorsRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setPassportDataErrors") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /setPassportDataErrors
-- 
-- The same as 'postSetPassportDataErrors' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSetPassportDataErrorsWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSetPassportDataErrorsRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSetPassportDataErrorsWithConfigurationRaw config
                                              body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setPassportDataErrors") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
