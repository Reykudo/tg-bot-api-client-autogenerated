{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postDeleteChatStickerSet
module TgBotAPI.Operations.PostDeleteChatStickerSet where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /deleteChatStickerSet
--
-- Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\\_set\\_sticker\\_set* optionally returned in [getChat](https:\/\/core.telegram.org\/bots\/api\/\#getchat) requests to check if the bot can use this method. Returns *True* on success.
postDeleteChatStickerSet ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostDeleteChatStickerSetRequestBody ->
  -- | Monadic computation which returns the result of the operation
  TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostDeleteChatStickerSetResponse)
postDeleteChatStickerSet body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostDeleteChatStickerSetResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostDeleteChatStickerSetResponse200
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            PostDeleteChatStickerSetResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostDeleteChatStickerSetResponseDefault
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatStickerSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)

-- | Defines the object schema located at @paths.\/deleteChatStickerSet.POST.requestBody.content.application\/json.schema@ in the specification.
newtype PostDeleteChatStickerSetRequestBody = PostDeleteChatStickerSetRequestBody
  { -- | chat_id: Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
    postDeleteChatStickerSetRequestBodyChatId :: PostDeleteChatStickerSetRequestBodyChatIdVariants
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteChatStickerSetRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postDeleteChatStickerSetRequestBodyChatId obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("chat_id" Data.Aeson.Types.ToJSON..= postDeleteChatStickerSetRequestBodyChatId obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteChatStickerSetRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteChatStickerSetRequestBody" (\obj -> GHC.Base.pure PostDeleteChatStickerSetRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id"))

-- | Create a new 'PostDeleteChatStickerSetRequestBody' with all required fields.
mkPostDeleteChatStickerSetRequestBody ::
  -- | 'postDeleteChatStickerSetRequestBodyChatId'
  PostDeleteChatStickerSetRequestBodyChatIdVariants ->
  PostDeleteChatStickerSetRequestBody
mkPostDeleteChatStickerSetRequestBody postDeleteChatStickerSetRequestBodyChatId = PostDeleteChatStickerSetRequestBody {postDeleteChatStickerSetRequestBodyChatId = postDeleteChatStickerSetRequestBodyChatId}

-- | Defines the oneOf schema located at @paths.\/deleteChatStickerSet.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
--
-- Unique identifier for the target chat or username of the target supergroup (in the format \`\@supergroupusername\`)
data PostDeleteChatStickerSetRequestBodyChatIdVariants
  = PostDeleteChatStickerSetRequestBodyChatIdInt GHC.Types.Int
  | PostDeleteChatStickerSetRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteChatStickerSetRequestBodyChatIdVariants where
  toJSON (PostDeleteChatStickerSetRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostDeleteChatStickerSetRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteChatStickerSetRequestBodyChatIdVariants where
  parseJSON val = case (PostDeleteChatStickerSetRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostDeleteChatStickerSetRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'postDeleteChatStickerSet'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostDeleteChatStickerSetResponseError' is used.
data PostDeleteChatStickerSetResponse
  = -- | Means either no matching case available or a parse error
    PostDeleteChatStickerSetResponseError Data.Text.Text
  | -- |
    PostDeleteChatStickerSetResponse200 PostDeleteChatStickerSetResponseBody200
  | -- |
    PostDeleteChatStickerSetResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/deleteChatStickerSet.POST.responses.200.content.application\/json.schema@ in the specification.
data PostDeleteChatStickerSetResponseBody200 = PostDeleteChatStickerSetResponseBody200
  { -- | ok
    postDeleteChatStickerSetResponseBody200Ok :: GHC.Types.Bool,
    -- | result
    postDeleteChatStickerSetResponseBody200Result :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteChatStickerSetResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postDeleteChatStickerSetResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postDeleteChatStickerSetResponseBody200Result obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postDeleteChatStickerSetResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postDeleteChatStickerSetResponseBody200Result obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteChatStickerSetResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteChatStickerSetResponseBody200" (\obj -> (GHC.Base.pure PostDeleteChatStickerSetResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))

-- | Create a new 'PostDeleteChatStickerSetResponseBody200' with all required fields.
mkPostDeleteChatStickerSetResponseBody200 ::
  -- | 'postDeleteChatStickerSetResponseBody200Ok'
  GHC.Types.Bool ->
  -- | 'postDeleteChatStickerSetResponseBody200Result'
  GHC.Types.Bool ->
  PostDeleteChatStickerSetResponseBody200
mkPostDeleteChatStickerSetResponseBody200 postDeleteChatStickerSetResponseBody200Ok postDeleteChatStickerSetResponseBody200Result =
  PostDeleteChatStickerSetResponseBody200
    { postDeleteChatStickerSetResponseBody200Ok = postDeleteChatStickerSetResponseBody200Ok,
      postDeleteChatStickerSetResponseBody200Result = postDeleteChatStickerSetResponseBody200Result
    }

-- | > POST /deleteChatStickerSet
--
-- The same as 'postDeleteChatStickerSet' but accepts an explicit configuration.
postDeleteChatStickerSetWithConfiguration ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  TgBotAPI.Common.Configuration ->
  -- | The request body to send
  PostDeleteChatStickerSetRequestBody ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostDeleteChatStickerSetResponse)
postDeleteChatStickerSetWithConfiguration
  config
  body =
    GHC.Base.fmap
      ( \response_2 ->
          GHC.Base.fmap
            ( Data.Either.either PostDeleteChatStickerSetResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostDeleteChatStickerSetResponse200
                                       Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                            Data.Either.Either
                                                              Data.Text.Text
                                                              PostDeleteChatStickerSetResponseBody200
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostDeleteChatStickerSetResponseDefault
                                       Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                            Data.Either.Either
                                                              Data.Text.Text
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_2
            )
            response_2
      )
      (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatStickerSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)

-- | > POST /deleteChatStickerSet
--
-- The same as 'postDeleteChatStickerSet' but returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteChatStickerSetRaw ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostDeleteChatStickerSetRequestBody ->
  -- | Monadic computation which returns the result of the operation
  TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postDeleteChatStickerSetRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatStickerSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)

-- | > POST /deleteChatStickerSet
--
-- The same as 'postDeleteChatStickerSet' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteChatStickerSetWithConfigurationRaw ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  TgBotAPI.Common.Configuration ->
  -- | The request body to send
  PostDeleteChatStickerSetRequestBody ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postDeleteChatStickerSetWithConfigurationRaw
  config
  body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatStickerSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
