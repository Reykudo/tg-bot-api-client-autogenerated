-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the different functions to run the operation postSendChatAction
module TgBotAPI.Operations.PostSendChatAction where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /sendChatAction
-- 
-- Use this method when you need to tell the user that something is happening on the bot\'s side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
-- 
-- Example: The [ImageBot](https:\/\/t.me\/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https:\/\/core.telegram.org\/bots\/api\/\#sendchataction) with *action* = *upload\\_photo*. The user will see a “sending photo” status for the bot.
-- 
-- We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
postSendChatAction :: forall m . TgBotAPI.Common.MonadHTTP m => PostSendChatActionRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSendChatActionResponse) -- ^ Monadic computation which returns the result of the operation
postSendChatAction body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSendChatActionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSendChatActionResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                         PostSendChatActionResponseBody200)
                                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSendChatActionResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                           Error)
                                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendChatAction") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/sendChatAction.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSendChatActionRequestBody = PostSendChatActionRequestBody {
  -- | action: Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https:\/\/core.telegram.org\/bots\/api\/\#sendmessage), *upload\\_photo* for [photos](https:\/\/core.telegram.org\/bots\/api\/\#sendphoto), *record\\_video* or *upload\\_video* for [videos](https:\/\/core.telegram.org\/bots\/api\/\#sendvideo), *record\\_voice* or *upload\\_voice* for [voice notes](https:\/\/core.telegram.org\/bots\/api\/\#sendvoice), *upload\\_document* for [general files](https:\/\/core.telegram.org\/bots\/api\/\#senddocument), *find\\_location* for [location data](https:\/\/core.telegram.org\/bots\/api\/\#sendlocation), *record\\_video\\_note* or *upload\\_video\\_note* for [video notes](https:\/\/core.telegram.org\/bots\/api\/\#sendvideonote).
  action :: Data.Text.Internal.Text
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  , chatId :: ChatIdVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendChatActionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("action" Data.Aeson.Types.ToJSON..= action obj : "chat_id" Data.Aeson.Types.ToJSON..= chatId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("action" Data.Aeson.Types.ToJSON..= action obj) GHC.Base.<> ("chat_id" Data.Aeson.Types.ToJSON..= chatId obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSendChatActionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendChatActionRequestBody" (\obj -> (GHC.Base.pure PostSendChatActionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id"))
-- | Create a new 'PostSendChatActionRequestBody' with all required fields.
mkPostSendChatActionRequestBody :: Data.Text.Internal.Text -- ^ 'action'
  -> ChatIdVariants -- ^ 'chatId'
  -> PostSendChatActionRequestBody
mkPostSendChatActionRequestBody action chatId = PostSendChatActionRequestBody{action = action,
                                                                              chatId = chatId}
-- | Defines the oneOf schema located at @paths.\/sendChatAction.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data ChatIdVariants =
   ChatIdInt GHC.Types.Int
  | ChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ChatIdVariants
    where toJSON (ChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ChatIdVariants
    where parseJSON val = case (ChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postSendChatAction'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSendChatActionResponseError' is used.
data PostSendChatActionResponse =
   PostSendChatActionResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSendChatActionResponse200 PostSendChatActionResponseBody200 -- ^ 
  | PostSendChatActionResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/sendChatAction.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSendChatActionResponseBody200 = PostSendChatActionResponseBody200 {
  -- | ok
  ok :: GHC.Types.Bool
  -- | result
  , result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendChatActionResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= ok obj : "result" Data.Aeson.Types.ToJSON..= result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSendChatActionResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendChatActionResponseBody200" (\obj -> (GHC.Base.pure PostSendChatActionResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSendChatActionResponseBody200' with all required fields.
mkPostSendChatActionResponseBody200 :: GHC.Types.Bool -- ^ 'ok'
  -> GHC.Types.Bool -- ^ 'result'
  -> PostSendChatActionResponseBody200
mkPostSendChatActionResponseBody200 ok result = PostSendChatActionResponseBody200{ok = ok,
                                                                                  result = result}
-- | > POST /sendChatAction
-- 
-- The same as 'postSendChatAction' but accepts an explicit configuration.
postSendChatActionWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSendChatActionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostSendChatActionResponse) -- ^ Monadic computation which returns the result of the operation
postSendChatActionWithConfiguration config
                                    body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostSendChatActionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSendChatActionResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                          PostSendChatActionResponseBody200)
                                                                                                                                                                                        | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSendChatActionResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                            Error)
                                                                                                                                                                                        | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendChatAction") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /sendChatAction
-- 
-- The same as 'postSendChatAction' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSendChatActionRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostSendChatActionRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSendChatActionRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendChatAction") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /sendChatAction
-- 
-- The same as 'postSendChatAction' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSendChatActionWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSendChatActionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSendChatActionWithConfigurationRaw config
                                       body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendChatAction") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
