{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSendDice
module TgBotAPI.Operations.PostSendDice where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /sendDice
--
-- Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https:\/\/core.telegram.org\/bots\/api\/\#message) is returned.
postSendDice ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostSendDiceRequestBody ->
  -- | Monadic computation which returns the result of the operation
  TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSendDiceResponse)
postSendDice body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSendDiceResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSendDiceResponse200
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            PostSendDiceResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSendDiceResponseDefault
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendDice") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)

-- | Defines the object schema located at @paths.\/sendDice.POST.requestBody.content.application\/json.schema@ in the specification.
data PostSendDiceRequestBody = PostSendDiceRequestBody
  { -- | allow_sending_without_reply: Pass *True*, if the message should be sent even if the specified replied-to message is not found
    postSendDiceRequestBodyAllowSendingWithoutReply :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
    postSendDiceRequestBodyChatId :: PostSendDiceRequestBodyChatIdVariants,
    -- | disable_notification: Sends the message [silently](https:\/\/telegram.org\/blog\/channels-2-0\#silent-messages). Users will receive a notification with no sound.
    postSendDiceRequestBodyDisableNotification :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | emoji: Emoji on which the dice throw animation is based. Currently, must be one of ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù, ‚ÄúüèÄ‚Äù, ‚Äú‚öΩ‚Äù, ‚Äúüé≥‚Äù, or ‚Äúüé∞‚Äù. Dice can have values 1-6 for ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù and ‚Äúüé≥‚Äù, values 1-5 for ‚ÄúüèÄ‚Äù and ‚Äú‚öΩ‚Äù, and values 1-64 for ‚Äúüé∞‚Äù. Defaults to ‚Äúüé≤‚Äù
    postSendDiceRequestBodyEmoji :: (GHC.Maybe.Maybe PostSendDiceRequestBodyEmoji),
    -- | reply_markup: Additional interface options. A JSON-serialized object for an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https:\/\/core.telegram.org\/bots\#keyboards), instructions to remove reply keyboard or to force a reply from the user.
    postSendDiceRequestBodyReplyMarkup :: (GHC.Maybe.Maybe PostSendDiceRequestBodyReplyMarkup),
    -- | reply_to_message_id: If the message is a reply, ID of the original message
    postSendDiceRequestBodyReplyToMessageId :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSendDiceRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("allow_sending_without_reply" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyAllowSendingWithoutReply obj : "chat_id" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyChatId obj : "disable_notification" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyDisableNotification obj : "emoji" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyEmoji obj : "reply_markup" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkup obj : "reply_to_message_id" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyToMessageId obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("allow_sending_without_reply" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyAllowSendingWithoutReply obj) GHC.Base.<> (("chat_id" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyChatId obj) GHC.Base.<> (("disable_notification" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyDisableNotification obj) GHC.Base.<> (("emoji" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyEmoji obj) GHC.Base.<> (("reply_markup" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkup obj) GHC.Base.<> ("reply_to_message_id" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyToMessageId obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSendDiceRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendDiceRequestBody" (\obj -> (((((GHC.Base.pure PostSendDiceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allow_sending_without_reply")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "disable_notification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "emoji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_to_message_id"))

-- | Create a new 'PostSendDiceRequestBody' with all required fields.
mkPostSendDiceRequestBody ::
  -- | 'postSendDiceRequestBodyChatId'
  PostSendDiceRequestBodyChatIdVariants ->
  PostSendDiceRequestBody
mkPostSendDiceRequestBody postSendDiceRequestBodyChatId =
  PostSendDiceRequestBody
    { postSendDiceRequestBodyAllowSendingWithoutReply = GHC.Maybe.Nothing,
      postSendDiceRequestBodyChatId = postSendDiceRequestBodyChatId,
      postSendDiceRequestBodyDisableNotification = GHC.Maybe.Nothing,
      postSendDiceRequestBodyEmoji = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkup = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyToMessageId = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/sendDice.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
--
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostSendDiceRequestBodyChatIdVariants
  = PostSendDiceRequestBodyChatIdInt GHC.Types.Int
  | PostSendDiceRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSendDiceRequestBodyChatIdVariants where
  toJSON (PostSendDiceRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostSendDiceRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostSendDiceRequestBodyChatIdVariants where
  parseJSON val = case (PostSendDiceRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSendDiceRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/sendDice.POST.requestBody.content.application\/json.schema.properties.emoji@ in the specification.
--
-- Emoji on which the dice throw animation is based. Currently, must be one of ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù, ‚ÄúüèÄ‚Äù, ‚Äú‚öΩ‚Äù, ‚Äúüé≥‚Äù, or ‚Äúüé∞‚Äù. Dice can have values 1-6 for ‚Äúüé≤‚Äù, ‚ÄúüéØ‚Äù and ‚Äúüé≥‚Äù, values 1-5 for ‚ÄúüèÄ‚Äù and ‚Äú‚öΩ‚Äù, and values 1-64 for ‚Äúüé∞‚Äù. Defaults to ‚Äúüé≤‚Äù
data PostSendDiceRequestBodyEmoji
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSendDiceRequestBodyEmojiOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSendDiceRequestBodyEmojiTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"üé≤"@
    PostSendDiceRequestBodyEmojiEnum_0
  | -- | Represents the JSON value @"üéØ"@
    PostSendDiceRequestBodyEmojiEnum_1
  | -- | Represents the JSON value @"üèÄ"@
    PostSendDiceRequestBodyEmojiEnum_2
  | -- | Represents the JSON value @"‚öΩ"@
    PostSendDiceRequestBodyEmojiEnum_3
  | -- | Represents the JSON value @"üé≥"@
    PostSendDiceRequestBodyEmojiEnum_4
  | -- | Represents the JSON value @"üé∞"@
    PostSendDiceRequestBodyEmojiEnum_5
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSendDiceRequestBodyEmoji where
  toJSON (PostSendDiceRequestBodyEmojiOther val) = val
  toJSON (PostSendDiceRequestBodyEmojiTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSendDiceRequestBodyEmojiEnum_0) = "\127922"
  toJSON (PostSendDiceRequestBodyEmojiEnum_1) = "\127919"
  toJSON (PostSendDiceRequestBodyEmojiEnum_2) = "\127936"
  toJSON (PostSendDiceRequestBodyEmojiEnum_3) = "\9917"
  toJSON (PostSendDiceRequestBodyEmojiEnum_4) = "\127923"
  toJSON (PostSendDiceRequestBodyEmojiEnum_5) = "\127920"

instance Data.Aeson.Types.FromJSON.FromJSON PostSendDiceRequestBodyEmoji where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "\127922" -> PostSendDiceRequestBodyEmojiEnum_0
            | val GHC.Classes.== "\127919" -> PostSendDiceRequestBodyEmojiEnum_1
            | val GHC.Classes.== "\127936" -> PostSendDiceRequestBodyEmojiEnum_2
            | val GHC.Classes.== "\9917" -> PostSendDiceRequestBodyEmojiEnum_3
            | val GHC.Classes.== "\127923" -> PostSendDiceRequestBodyEmojiEnum_4
            | val GHC.Classes.== "\127920" -> PostSendDiceRequestBodyEmojiEnum_5
            | GHC.Base.otherwise -> PostSendDiceRequestBodyEmojiOther val
      )

-- | Defines the object schema located at @paths.\/sendDice.POST.requestBody.content.application\/json.schema.properties.reply_markup.anyOf@ in the specification.
--
-- Additional interface options. A JSON-serialized object for an [inline keyboard](https:\\\/\\\/core.telegram.org\\\/bots\\\#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https:\\\/\\\/core.telegram.org\\\/bots\\\#keyboards), instructions to remove reply keyboard or to force a reply from the user.
data PostSendDiceRequestBodyReplyMarkup = PostSendDiceRequestBodyReplyMarkup
  { -- | force_reply: Shows reply interface to the user, as if they manually selected the bot\'s message and tapped \'Reply\'
    postSendDiceRequestBodyReplyMarkupForceReply :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | inline_keyboard: Array of button rows, each represented by an Array of [InlineKeyboardButton](https:\/\/core.telegram.org\/bots\/api\/\#inlinekeyboardbutton) objects
    postSendDiceRequestBodyReplyMarkupInlineKeyboard :: (GHC.Maybe.Maybe ([[InlineKeyboardButton]])),
    -- | keyboard: Array of button rows, each represented by an Array of [KeyboardButton](https:\/\/core.telegram.org\/bots\/api\/\#keyboardbutton) objects
    postSendDiceRequestBodyReplyMarkupKeyboard :: (GHC.Maybe.Maybe ([[KeyboardButton]])),
    -- | one_time_keyboard: *Optional*. Requests clients to hide the keyboard as soon as it\'s been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat ‚Äì the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
    postSendDiceRequestBodyReplyMarkupOneTimeKeyboard :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | remove_keyboard: Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\\_time\\_keyboard* in [ReplyKeyboardMarkup](https:\/\/core.telegram.org\/bots\/api\/\#replykeyboardmarkup))
    postSendDiceRequestBodyReplyMarkupRemoveKeyboard :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | resize_keyboard: *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app\'s standard keyboard.
    postSendDiceRequestBodyReplyMarkupResizeKeyboard :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | selective: *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are \@mentioned in the *text* of the [Message](https:\/\/core.telegram.org\/bots\/api\/\#message) object; 2) if the bot\'s message is a reply (has *reply\\_to\\_message\\_id*), sender of the original message.
    --
    -- *Example:* A user requests to change the bot\'s language, bot replies to the request with a keyboard to select the new language. Other users in the group don\'t see the keyboard.
    postSendDiceRequestBodyReplyMarkupSelective :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSendDiceRequestBodyReplyMarkup where
  toJSON obj = Data.Aeson.Types.Internal.object ("force_reply" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupForceReply obj : "inline_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupInlineKeyboard obj : "keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupKeyboard obj : "one_time_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupOneTimeKeyboard obj : "remove_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupRemoveKeyboard obj : "resize_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupResizeKeyboard obj : "selective" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupSelective obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("force_reply" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupForceReply obj) GHC.Base.<> (("inline_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupInlineKeyboard obj) GHC.Base.<> (("keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupKeyboard obj) GHC.Base.<> (("one_time_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupOneTimeKeyboard obj) GHC.Base.<> (("remove_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupRemoveKeyboard obj) GHC.Base.<> (("resize_keyboard" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupResizeKeyboard obj) GHC.Base.<> ("selective" Data.Aeson.Types.ToJSON..= postSendDiceRequestBodyReplyMarkupSelective obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSendDiceRequestBodyReplyMarkup where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendDiceRequestBodyReplyMarkup" (\obj -> ((((((GHC.Base.pure PostSendDiceRequestBodyReplyMarkup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "force_reply")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inline_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "one_time_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "remove_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "resize_keyboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "selective"))

-- | Create a new 'PostSendDiceRequestBodyReplyMarkup' with all required fields.
mkPostSendDiceRequestBodyReplyMarkup :: PostSendDiceRequestBodyReplyMarkup
mkPostSendDiceRequestBodyReplyMarkup =
  PostSendDiceRequestBodyReplyMarkup
    { postSendDiceRequestBodyReplyMarkupForceReply = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkupInlineKeyboard = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkupKeyboard = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkupOneTimeKeyboard = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkupRemoveKeyboard = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkupResizeKeyboard = GHC.Maybe.Nothing,
      postSendDiceRequestBodyReplyMarkupSelective = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postSendDice'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSendDiceResponseError' is used.
data PostSendDiceResponse
  = -- | Means either no matching case available or a parse error
    PostSendDiceResponseError Data.Text.Text
  | -- |
    PostSendDiceResponse200 PostSendDiceResponseBody200
  | -- |
    PostSendDiceResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/sendDice.POST.responses.200.content.application\/json.schema@ in the specification.
data PostSendDiceResponseBody200 = PostSendDiceResponseBody200
  { -- | ok
    postSendDiceResponseBody200Ok :: GHC.Types.Bool,
    -- | result: This object represents a message.
    postSendDiceResponseBody200Result :: Message
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSendDiceResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSendDiceResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSendDiceResponseBody200Result obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSendDiceResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSendDiceResponseBody200Result obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostSendDiceResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendDiceResponseBody200" (\obj -> (GHC.Base.pure PostSendDiceResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))

-- | Create a new 'PostSendDiceResponseBody200' with all required fields.
mkPostSendDiceResponseBody200 ::
  -- | 'postSendDiceResponseBody200Ok'
  GHC.Types.Bool ->
  -- | 'postSendDiceResponseBody200Result'
  Message ->
  PostSendDiceResponseBody200
mkPostSendDiceResponseBody200 postSendDiceResponseBody200Ok postSendDiceResponseBody200Result =
  PostSendDiceResponseBody200
    { postSendDiceResponseBody200Ok = postSendDiceResponseBody200Ok,
      postSendDiceResponseBody200Result = postSendDiceResponseBody200Result
    }

-- | > POST /sendDice
--
-- The same as 'postSendDice' but accepts an explicit configuration.
postSendDiceWithConfiguration ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  TgBotAPI.Common.Configuration ->
  -- | The request body to send
  PostSendDiceRequestBody ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostSendDiceResponse)
postSendDiceWithConfiguration
  config
  body =
    GHC.Base.fmap
      ( \response_2 ->
          GHC.Base.fmap
            ( Data.Either.either PostSendDiceResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSendDiceResponse200
                                       Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                            Data.Either.Either
                                                              Data.Text.Text
                                                              PostSendDiceResponseBody200
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSendDiceResponseDefault
                                       Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                            Data.Either.Either
                                                              Data.Text.Text
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_2
            )
            response_2
      )
      (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendDice") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)

-- | > POST /sendDice
--
-- The same as 'postSendDice' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSendDiceRaw ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostSendDiceRequestBody ->
  -- | Monadic computation which returns the result of the operation
  TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSendDiceRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendDice") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)

-- | > POST /sendDice
--
-- The same as 'postSendDice' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSendDiceWithConfigurationRaw ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  TgBotAPI.Common.Configuration ->
  -- | The request body to send
  PostSendDiceRequestBody ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postSendDiceWithConfigurationRaw
  config
  body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendDice") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
