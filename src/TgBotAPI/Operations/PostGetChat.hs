-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postGetChat
module TgBotAPI.Operations.PostGetChat where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /getChat
-- 
-- Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https:\/\/core.telegram.org\/bots\/api\/\#chat) object on success.
postGetChat :: forall m . TgBotAPI.Common.MonadHTTP m => PostGetChatRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostGetChatResponse) -- ^ Monadic computation which returns the result of the operation
postGetChat body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostGetChatResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                    PostGetChatResponseBody200)
                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                      Error)
                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChat") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/getChat.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetChatRequestBody = PostGetChatRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format \`\@channelusername\`)
  postGetChatRequestBodyChatId :: PostGetChatRequestBodyChatIdVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postGetChatRequestBodyChatId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("chat_id" Data.Aeson.Types.ToJSON..= postGetChatRequestBodyChatId obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetChatRequestBody" (\obj -> GHC.Base.pure PostGetChatRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id"))
-- | Create a new 'PostGetChatRequestBody' with all required fields.
mkPostGetChatRequestBody :: PostGetChatRequestBodyChatIdVariants -- ^ 'postGetChatRequestBodyChatId'
  -> PostGetChatRequestBody
mkPostGetChatRequestBody postGetChatRequestBodyChatId = PostGetChatRequestBody{postGetChatRequestBodyChatId = postGetChatRequestBodyChatId}
-- | Defines the oneOf schema located at @paths.\/getChat.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target supergroup or channel (in the format \`\@channelusername\`)
data PostGetChatRequestBodyChatIdVariants =
   PostGetChatRequestBodyChatIdInt GHC.Types.Int
  | PostGetChatRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatRequestBodyChatIdVariants
    where toJSON (PostGetChatRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostGetChatRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatRequestBodyChatIdVariants
    where parseJSON val = case (PostGetChatRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostGetChatRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postGetChat'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostGetChatResponseError' is used.
data PostGetChatResponse =
   PostGetChatResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostGetChatResponse200 PostGetChatResponseBody200 -- ^ 
  | PostGetChatResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/getChat.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetChatResponseBody200 = PostGetChatResponseBody200 {
  -- | ok
  postGetChatResponseBody200Ok :: GHC.Types.Bool
  -- | result: This object represents a chat.
  , postGetChatResponseBody200Result :: Chat
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postGetChatResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postGetChatResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postGetChatResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postGetChatResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetChatResponseBody200" (\obj -> (GHC.Base.pure PostGetChatResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostGetChatResponseBody200' with all required fields.
mkPostGetChatResponseBody200 :: GHC.Types.Bool -- ^ 'postGetChatResponseBody200Ok'
  -> Chat -- ^ 'postGetChatResponseBody200Result'
  -> PostGetChatResponseBody200
mkPostGetChatResponseBody200 postGetChatResponseBody200Ok postGetChatResponseBody200Result = PostGetChatResponseBody200{postGetChatResponseBody200Ok = postGetChatResponseBody200Ok,
                                                                                                                        postGetChatResponseBody200Result = postGetChatResponseBody200Result}
-- | > POST /getChat
-- 
-- The same as 'postGetChat' but accepts an explicit configuration.
postGetChatWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostGetChatRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostGetChatResponse) -- ^ Monadic computation which returns the result of the operation
postGetChatWithConfiguration config
                             body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostGetChatResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     PostGetChatResponseBody200)
                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                       Error)
                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChat") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /getChat
-- 
-- The same as 'postGetChat' but returns the raw 'Data.ByteString.Char8.ByteString'.
postGetChatRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostGetChatRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postGetChatRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChat") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /getChat
-- 
-- The same as 'postGetChat' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postGetChatWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostGetChatRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postGetChatWithConfigurationRaw config
                                body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChat") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
