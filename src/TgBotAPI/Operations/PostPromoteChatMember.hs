-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE DuplicateRecordFields #-}

-- | Contains the different functions to run the operation postPromoteChatMember
module TgBotAPI.Operations.PostPromoteChatMember where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /promoteChatMember
-- 
-- Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
postPromoteChatMember :: forall m . TgBotAPI.Common.MonadHTTP m => PostPromoteChatMemberRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostPromoteChatMemberResponse) -- ^ Monadic computation which returns the result of the operation
postPromoteChatMember body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostPromoteChatMemberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostPromoteChatMemberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  PostPromoteChatMemberResponseBody200)
                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostPromoteChatMemberResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    Error)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/promoteChatMember") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/promoteChatMember.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPromoteChatMemberRequestBody = PostPromoteChatMemberRequestBody {
  -- | can_change_info: Pass True, if the administrator can change chat title, photo and other settings
  canChangeInfo :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_delete_messages: Pass True, if the administrator can delete messages of other users
  , canDeleteMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_edit_messages: Pass True, if the administrator can edit messages of other users and can pin messages, channels only
  , canEditMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_invite_users: Pass True, if the administrator can invite new users to the chat
  , canInviteUsers :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_manage_chat: Pass True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege
  , canManageChat :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_manage_voice_chats: Pass True, if the administrator can manage voice chats
  , canManageVoiceChats :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_pin_messages: Pass True, if the administrator can pin messages, supergroups only
  , canPinMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_post_messages: Pass True, if the administrator can create channel posts, channels only
  , canPostMessages :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_promote_members: Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
  , canPromoteMembers :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | can_restrict_members: Pass True, if the administrator can restrict, ban or unban chat members
  , canRestrictMembers :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  , chatId :: ChatIdVariants
  -- | is_anonymous: Pass *True*, if the administrator\'s presence in the chat is hidden
  , isAnonymous :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | user_id: Unique identifier of the target user
  , userId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPromoteChatMemberRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("can_change_info" Data.Aeson.Types.ToJSON..= canChangeInfo obj : "can_delete_messages" Data.Aeson.Types.ToJSON..= canDeleteMessages obj : "can_edit_messages" Data.Aeson.Types.ToJSON..= canEditMessages obj : "can_invite_users" Data.Aeson.Types.ToJSON..= canInviteUsers obj : "can_manage_chat" Data.Aeson.Types.ToJSON..= canManageChat obj : "can_manage_voice_chats" Data.Aeson.Types.ToJSON..= canManageVoiceChats obj : "can_pin_messages" Data.Aeson.Types.ToJSON..= canPinMessages obj : "can_post_messages" Data.Aeson.Types.ToJSON..= canPostMessages obj : "can_promote_members" Data.Aeson.Types.ToJSON..= canPromoteMembers obj : "can_restrict_members" Data.Aeson.Types.ToJSON..= canRestrictMembers obj : "chat_id" Data.Aeson.Types.ToJSON..= chatId obj : "is_anonymous" Data.Aeson.Types.ToJSON..= isAnonymous obj : "user_id" Data.Aeson.Types.ToJSON..= userId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("can_change_info" Data.Aeson.Types.ToJSON..= canChangeInfo obj) GHC.Base.<> (("can_delete_messages" Data.Aeson.Types.ToJSON..= canDeleteMessages obj) GHC.Base.<> (("can_edit_messages" Data.Aeson.Types.ToJSON..= canEditMessages obj) GHC.Base.<> (("can_invite_users" Data.Aeson.Types.ToJSON..= canInviteUsers obj) GHC.Base.<> (("can_manage_chat" Data.Aeson.Types.ToJSON..= canManageChat obj) GHC.Base.<> (("can_manage_voice_chats" Data.Aeson.Types.ToJSON..= canManageVoiceChats obj) GHC.Base.<> (("can_pin_messages" Data.Aeson.Types.ToJSON..= canPinMessages obj) GHC.Base.<> (("can_post_messages" Data.Aeson.Types.ToJSON..= canPostMessages obj) GHC.Base.<> (("can_promote_members" Data.Aeson.Types.ToJSON..= canPromoteMembers obj) GHC.Base.<> (("can_restrict_members" Data.Aeson.Types.ToJSON..= canRestrictMembers obj) GHC.Base.<> (("chat_id" Data.Aeson.Types.ToJSON..= chatId obj) GHC.Base.<> (("is_anonymous" Data.Aeson.Types.ToJSON..= isAnonymous obj) GHC.Base.<> ("user_id" Data.Aeson.Types.ToJSON..= userId obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostPromoteChatMemberRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPromoteChatMemberRequestBody" (\obj -> ((((((((((((GHC.Base.pure PostPromoteChatMemberRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_change_info")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_delete_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_edit_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_invite_users")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_manage_chat")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_manage_voice_chats")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_pin_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_post_messages")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_promote_members")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "can_restrict_members")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_anonymous")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_id"))
-- | Create a new 'PostPromoteChatMemberRequestBody' with all required fields.
mkPostPromoteChatMemberRequestBody :: ChatIdVariants -- ^ 'chatId'
  -> GHC.Types.Int -- ^ 'userId'
  -> PostPromoteChatMemberRequestBody
mkPostPromoteChatMemberRequestBody chatId userId = PostPromoteChatMemberRequestBody{canChangeInfo = GHC.Maybe.Nothing,
                                                                                    canDeleteMessages = GHC.Maybe.Nothing,
                                                                                    canEditMessages = GHC.Maybe.Nothing,
                                                                                    canInviteUsers = GHC.Maybe.Nothing,
                                                                                    canManageChat = GHC.Maybe.Nothing,
                                                                                    canManageVoiceChats = GHC.Maybe.Nothing,
                                                                                    canPinMessages = GHC.Maybe.Nothing,
                                                                                    canPostMessages = GHC.Maybe.Nothing,
                                                                                    canPromoteMembers = GHC.Maybe.Nothing,
                                                                                    canRestrictMembers = GHC.Maybe.Nothing,
                                                                                    chatId = chatId,
                                                                                    isAnonymous = GHC.Maybe.Nothing,
                                                                                    userId = userId}
-- | Defines the oneOf schema located at @paths.\/promoteChatMember.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data ChatIdVariants =
   ChatIdInt GHC.Types.Int
  | ChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON ChatIdVariants
    where toJSON (ChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (ChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON ChatIdVariants
    where parseJSON val = case (ChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postPromoteChatMember'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPromoteChatMemberResponseError' is used.
data PostPromoteChatMemberResponse =
   PostPromoteChatMemberResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostPromoteChatMemberResponse200 PostPromoteChatMemberResponseBody200 -- ^ 
  | PostPromoteChatMemberResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/promoteChatMember.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostPromoteChatMemberResponseBody200 = PostPromoteChatMemberResponseBody200 {
  -- | ok
  ok :: GHC.Types.Bool
  -- | result
  , result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostPromoteChatMemberResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= ok obj : "result" Data.Aeson.Types.ToJSON..= result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostPromoteChatMemberResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPromoteChatMemberResponseBody200" (\obj -> (GHC.Base.pure PostPromoteChatMemberResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostPromoteChatMemberResponseBody200' with all required fields.
mkPostPromoteChatMemberResponseBody200 :: GHC.Types.Bool -- ^ 'ok'
  -> GHC.Types.Bool -- ^ 'result'
  -> PostPromoteChatMemberResponseBody200
mkPostPromoteChatMemberResponseBody200 ok result = PostPromoteChatMemberResponseBody200{ok = ok,
                                                                                        result = result}
-- | > POST /promoteChatMember
-- 
-- The same as 'postPromoteChatMember' but accepts an explicit configuration.
postPromoteChatMemberWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostPromoteChatMemberRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostPromoteChatMemberResponse) -- ^ Monadic computation which returns the result of the operation
postPromoteChatMemberWithConfiguration config
                                       body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostPromoteChatMemberResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostPromoteChatMemberResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                   PostPromoteChatMemberResponseBody200)
                                                                                                                                                                                              | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostPromoteChatMemberResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                     Error)
                                                                                                                                                                                              | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/promoteChatMember") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /promoteChatMember
-- 
-- The same as 'postPromoteChatMember' but returns the raw 'Data.ByteString.Char8.ByteString'.
postPromoteChatMemberRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostPromoteChatMemberRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postPromoteChatMemberRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/promoteChatMember") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /promoteChatMember
-- 
-- The same as 'postPromoteChatMember' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postPromoteChatMemberWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostPromoteChatMemberRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postPromoteChatMemberWithConfigurationRaw config
                                          body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/promoteChatMember") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
