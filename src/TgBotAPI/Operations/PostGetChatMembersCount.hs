-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postGetChatMembersCount
module TgBotAPI.Operations.PostGetChatMembersCount where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /getChatMembersCount
-- 
-- Use this method to get the number of members in a chat. Returns *Int* on success.
postGetChatMembersCount :: forall m . TgBotAPI.Common.MonadHTTP m => PostGetChatMembersCountRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostGetChatMembersCountResponse) -- ^ Monadic computation which returns the result of the operation
postGetChatMembersCount body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostGetChatMembersCountResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatMembersCountResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                        PostGetChatMembersCountResponseBody200)
                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatMembersCountResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                          Error)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChatMembersCount") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/getChatMembersCount.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetChatMembersCountRequestBody = PostGetChatMembersCountRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target supergroup or channel (in the format \`\@channelusername\`)
  postGetChatMembersCountRequestBodyChatId :: PostGetChatMembersCountRequestBodyChatIdVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatMembersCountRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postGetChatMembersCountRequestBodyChatId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("chat_id" Data.Aeson.Types.ToJSON..= postGetChatMembersCountRequestBodyChatId obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatMembersCountRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetChatMembersCountRequestBody" (\obj -> GHC.Base.pure PostGetChatMembersCountRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id"))
-- | Create a new 'PostGetChatMembersCountRequestBody' with all required fields.
mkPostGetChatMembersCountRequestBody :: PostGetChatMembersCountRequestBodyChatIdVariants -- ^ 'postGetChatMembersCountRequestBodyChatId'
  -> PostGetChatMembersCountRequestBody
mkPostGetChatMembersCountRequestBody postGetChatMembersCountRequestBodyChatId = PostGetChatMembersCountRequestBody{postGetChatMembersCountRequestBodyChatId = postGetChatMembersCountRequestBodyChatId}
-- | Defines the oneOf schema located at @paths.\/getChatMembersCount.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target supergroup or channel (in the format \`\@channelusername\`)
data PostGetChatMembersCountRequestBodyChatIdVariants =
   PostGetChatMembersCountRequestBodyChatIdInt GHC.Types.Int
  | PostGetChatMembersCountRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatMembersCountRequestBodyChatIdVariants
    where toJSON (PostGetChatMembersCountRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostGetChatMembersCountRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatMembersCountRequestBodyChatIdVariants
    where parseJSON val = case (PostGetChatMembersCountRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostGetChatMembersCountRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postGetChatMembersCount'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostGetChatMembersCountResponseError' is used.
data PostGetChatMembersCountResponse =
   PostGetChatMembersCountResponseError Data.Text.Text -- ^ Means either no matching case available or a parse error
  | PostGetChatMembersCountResponse200 PostGetChatMembersCountResponseBody200 -- ^ 
  | PostGetChatMembersCountResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/getChatMembersCount.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetChatMembersCountResponseBody200 = PostGetChatMembersCountResponseBody200 {
  -- | ok
  postGetChatMembersCountResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postGetChatMembersCountResponseBody200Result :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetChatMembersCountResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postGetChatMembersCountResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postGetChatMembersCountResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postGetChatMembersCountResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postGetChatMembersCountResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetChatMembersCountResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetChatMembersCountResponseBody200" (\obj -> (GHC.Base.pure PostGetChatMembersCountResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostGetChatMembersCountResponseBody200' with all required fields.
mkPostGetChatMembersCountResponseBody200 :: GHC.Types.Bool -- ^ 'postGetChatMembersCountResponseBody200Ok'
  -> GHC.Types.Int -- ^ 'postGetChatMembersCountResponseBody200Result'
  -> PostGetChatMembersCountResponseBody200
mkPostGetChatMembersCountResponseBody200 postGetChatMembersCountResponseBody200Ok postGetChatMembersCountResponseBody200Result = PostGetChatMembersCountResponseBody200{postGetChatMembersCountResponseBody200Ok = postGetChatMembersCountResponseBody200Ok,
                                                                                                                                                                        postGetChatMembersCountResponseBody200Result = postGetChatMembersCountResponseBody200Result}
-- | > POST /getChatMembersCount
-- 
-- The same as 'postGetChatMembersCount' but accepts an explicit configuration.
postGetChatMembersCountWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostGetChatMembersCountRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostGetChatMembersCountResponse) -- ^ Monadic computation which returns the result of the operation
postGetChatMembersCountWithConfiguration config
                                         body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostGetChatMembersCountResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatMembersCountResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                                         PostGetChatMembersCountResponseBody200)
                                                                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetChatMembersCountResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                           Error)
                                                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChatMembersCount") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /getChatMembersCount
-- 
-- The same as 'postGetChatMembersCount' but returns the raw 'Data.ByteString.Char8.ByteString'.
postGetChatMembersCountRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostGetChatMembersCountRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postGetChatMembersCountRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChatMembersCount") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /getChatMembersCount
-- 
-- The same as 'postGetChatMembersCount' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postGetChatMembersCountWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostGetChatMembersCountRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postGetChatMembersCountWithConfigurationRaw config
                                            body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getChatMembersCount") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
