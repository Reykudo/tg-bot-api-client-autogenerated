-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postDeleteStickerFromSet
module TgBotAPI.Operations.PostDeleteStickerFromSet where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /deleteStickerFromSet
-- 
-- Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
postDeleteStickerFromSet :: forall m . TgBotAPI.Common.MonadHTTP m => PostDeleteStickerFromSetRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostDeleteStickerFromSetResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteStickerFromSet body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostDeleteStickerFromSetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteStickerFromSetResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostDeleteStickerFromSetResponseBody200)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteStickerFromSetResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                             Error)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteStickerFromSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/deleteStickerFromSet.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteStickerFromSetRequestBody = PostDeleteStickerFromSetRequestBody {
  -- | sticker: File identifier of the sticker
  postDeleteStickerFromSetRequestBodySticker :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteStickerFromSetRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("sticker" Data.Aeson.Types.ToJSON..= postDeleteStickerFromSetRequestBodySticker obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("sticker" Data.Aeson.Types.ToJSON..= postDeleteStickerFromSetRequestBodySticker obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteStickerFromSetRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteStickerFromSetRequestBody" (\obj -> GHC.Base.pure PostDeleteStickerFromSetRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sticker"))
-- | Create a new 'PostDeleteStickerFromSetRequestBody' with all required fields.
mkPostDeleteStickerFromSetRequestBody :: Data.Text.Internal.Text -- ^ 'postDeleteStickerFromSetRequestBodySticker'
  -> PostDeleteStickerFromSetRequestBody
mkPostDeleteStickerFromSetRequestBody postDeleteStickerFromSetRequestBodySticker = PostDeleteStickerFromSetRequestBody{postDeleteStickerFromSetRequestBodySticker = postDeleteStickerFromSetRequestBodySticker}
-- | Represents a response of the operation 'postDeleteStickerFromSet'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostDeleteStickerFromSetResponseError' is used.
data PostDeleteStickerFromSetResponse =
   PostDeleteStickerFromSetResponseError Data.Text.Text -- ^ Means either no matching case available or a parse error
  | PostDeleteStickerFromSetResponse200 PostDeleteStickerFromSetResponseBody200 -- ^ 
  | PostDeleteStickerFromSetResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/deleteStickerFromSet.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteStickerFromSetResponseBody200 = PostDeleteStickerFromSetResponseBody200 {
  -- | ok
  postDeleteStickerFromSetResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postDeleteStickerFromSetResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteStickerFromSetResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postDeleteStickerFromSetResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postDeleteStickerFromSetResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postDeleteStickerFromSetResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postDeleteStickerFromSetResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteStickerFromSetResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteStickerFromSetResponseBody200" (\obj -> (GHC.Base.pure PostDeleteStickerFromSetResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostDeleteStickerFromSetResponseBody200' with all required fields.
mkPostDeleteStickerFromSetResponseBody200 :: GHC.Types.Bool -- ^ 'postDeleteStickerFromSetResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postDeleteStickerFromSetResponseBody200Result'
  -> PostDeleteStickerFromSetResponseBody200
mkPostDeleteStickerFromSetResponseBody200 postDeleteStickerFromSetResponseBody200Ok postDeleteStickerFromSetResponseBody200Result = PostDeleteStickerFromSetResponseBody200{postDeleteStickerFromSetResponseBody200Ok = postDeleteStickerFromSetResponseBody200Ok,
                                                                                                                                                                            postDeleteStickerFromSetResponseBody200Result = postDeleteStickerFromSetResponseBody200Result}
-- | > POST /deleteStickerFromSet
-- 
-- The same as 'postDeleteStickerFromSet' but accepts an explicit configuration.
postDeleteStickerFromSetWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostDeleteStickerFromSetRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostDeleteStickerFromSetResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteStickerFromSetWithConfiguration config
                                          body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostDeleteStickerFromSetResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteStickerFromSetResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostDeleteStickerFromSetResponseBody200)
                                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteStickerFromSetResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteStickerFromSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /deleteStickerFromSet
-- 
-- The same as 'postDeleteStickerFromSet' but returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteStickerFromSetRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostDeleteStickerFromSetRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postDeleteStickerFromSetRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteStickerFromSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /deleteStickerFromSet
-- 
-- The same as 'postDeleteStickerFromSet' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteStickerFromSetWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostDeleteStickerFromSetRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postDeleteStickerFromSetWithConfigurationRaw config
                                             body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteStickerFromSet") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
