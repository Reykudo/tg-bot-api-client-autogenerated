-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postDeleteChatPhoto
module TgBotAPI.Operations.PostDeleteChatPhoto where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /deleteChatPhoto
-- 
-- Use this method to delete a chat photo. Photos can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
postDeleteChatPhoto :: forall m . TgBotAPI.Common.MonadHTTP m => PostDeleteChatPhotoRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostDeleteChatPhotoResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteChatPhoto body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostDeleteChatPhotoResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteChatPhotoResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                            PostDeleteChatPhotoResponseBody200)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteChatPhotoResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatPhoto") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/deleteChatPhoto.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteChatPhotoRequestBody = PostDeleteChatPhotoRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postDeleteChatPhotoRequestBodyChatId :: PostDeleteChatPhotoRequestBodyChatIdVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteChatPhotoRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postDeleteChatPhotoRequestBodyChatId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("chat_id" Data.Aeson.Types.ToJSON..= postDeleteChatPhotoRequestBodyChatId obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteChatPhotoRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteChatPhotoRequestBody" (\obj -> GHC.Base.pure PostDeleteChatPhotoRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id"))
-- | Create a new 'PostDeleteChatPhotoRequestBody' with all required fields.
mkPostDeleteChatPhotoRequestBody :: PostDeleteChatPhotoRequestBodyChatIdVariants -- ^ 'postDeleteChatPhotoRequestBodyChatId'
  -> PostDeleteChatPhotoRequestBody
mkPostDeleteChatPhotoRequestBody postDeleteChatPhotoRequestBodyChatId = PostDeleteChatPhotoRequestBody{postDeleteChatPhotoRequestBodyChatId = postDeleteChatPhotoRequestBodyChatId}
-- | Defines the oneOf schema located at @paths.\/deleteChatPhoto.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostDeleteChatPhotoRequestBodyChatIdVariants =
   PostDeleteChatPhotoRequestBodyChatIdInt GHC.Types.Int
  | PostDeleteChatPhotoRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteChatPhotoRequestBodyChatIdVariants
    where toJSON (PostDeleteChatPhotoRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostDeleteChatPhotoRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteChatPhotoRequestBodyChatIdVariants
    where parseJSON val = case (PostDeleteChatPhotoRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostDeleteChatPhotoRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postDeleteChatPhoto'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostDeleteChatPhotoResponseError' is used.
data PostDeleteChatPhotoResponse =
   PostDeleteChatPhotoResponseError Data.Text.Text -- ^ Means either no matching case available or a parse error
  | PostDeleteChatPhotoResponse200 PostDeleteChatPhotoResponseBody200 -- ^ 
  | PostDeleteChatPhotoResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/deleteChatPhoto.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteChatPhotoResponseBody200 = PostDeleteChatPhotoResponseBody200 {
  -- | ok
  postDeleteChatPhotoResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postDeleteChatPhotoResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteChatPhotoResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postDeleteChatPhotoResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postDeleteChatPhotoResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postDeleteChatPhotoResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postDeleteChatPhotoResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteChatPhotoResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteChatPhotoResponseBody200" (\obj -> (GHC.Base.pure PostDeleteChatPhotoResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostDeleteChatPhotoResponseBody200' with all required fields.
mkPostDeleteChatPhotoResponseBody200 :: GHC.Types.Bool -- ^ 'postDeleteChatPhotoResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postDeleteChatPhotoResponseBody200Result'
  -> PostDeleteChatPhotoResponseBody200
mkPostDeleteChatPhotoResponseBody200 postDeleteChatPhotoResponseBody200Ok postDeleteChatPhotoResponseBody200Result = PostDeleteChatPhotoResponseBody200{postDeleteChatPhotoResponseBody200Ok = postDeleteChatPhotoResponseBody200Ok,
                                                                                                                                                        postDeleteChatPhotoResponseBody200Result = postDeleteChatPhotoResponseBody200Result}
-- | > POST /deleteChatPhoto
-- 
-- The same as 'postDeleteChatPhoto' but accepts an explicit configuration.
postDeleteChatPhotoWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostDeleteChatPhotoRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostDeleteChatPhotoResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteChatPhotoWithConfiguration config
                                     body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostDeleteChatPhotoResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteChatPhotoResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                             PostDeleteChatPhotoResponseBody200)
                                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteChatPhotoResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                               Error)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatPhoto") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /deleteChatPhoto
-- 
-- The same as 'postDeleteChatPhoto' but returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteChatPhotoRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostDeleteChatPhotoRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postDeleteChatPhotoRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatPhoto") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /deleteChatPhoto
-- 
-- The same as 'postDeleteChatPhoto' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteChatPhotoWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostDeleteChatPhotoRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postDeleteChatPhotoWithConfigurationRaw config
                                        body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteChatPhoto") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
