-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSendMediaGroup
module TgBotAPI.Operations.PostSendMediaGroup where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /sendMediaGroup
-- 
-- Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https:\/\/core.telegram.org\/bots\/api\/\#message) that were sent is returned.
postSendMediaGroup :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSendMediaGroupResponse) -- ^ Monadic computation which returns the result of the operation
postSendMediaGroup = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSendMediaGroupResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSendMediaGroupResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                    PostSendMediaGroupResponseBody200)
                                                                                                                                                                  | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSendMediaGroupResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                      Error)
                                                                                                                                                                  | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendMediaGroup") GHC.Base.mempty)
-- | Represents a response of the operation 'postSendMediaGroup'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSendMediaGroupResponseError' is used.
data PostSendMediaGroupResponse =
   PostSendMediaGroupResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostSendMediaGroupResponse200 PostSendMediaGroupResponseBody200 -- ^ 
  | PostSendMediaGroupResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/sendMediaGroup.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSendMediaGroupResponseBody200 = PostSendMediaGroupResponseBody200 {
  -- | ok
  postSendMediaGroupResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postSendMediaGroupResponseBody200Result :: ([Message])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSendMediaGroupResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSendMediaGroupResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSendMediaGroupResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSendMediaGroupResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSendMediaGroupResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSendMediaGroupResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSendMediaGroupResponseBody200" (\obj -> (GHC.Base.pure PostSendMediaGroupResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSendMediaGroupResponseBody200' with all required fields.
mkPostSendMediaGroupResponseBody200 :: GHC.Types.Bool -- ^ 'postSendMediaGroupResponseBody200Ok'
  -> [Message] -- ^ 'postSendMediaGroupResponseBody200Result'
  -> PostSendMediaGroupResponseBody200
mkPostSendMediaGroupResponseBody200 postSendMediaGroupResponseBody200Ok postSendMediaGroupResponseBody200Result = PostSendMediaGroupResponseBody200{postSendMediaGroupResponseBody200Ok = postSendMediaGroupResponseBody200Ok,
                                                                                                                                                    postSendMediaGroupResponseBody200Result = postSendMediaGroupResponseBody200Result}
-- | > POST /sendMediaGroup
-- 
-- The same as 'postSendMediaGroup' but accepts an explicit configuration.
postSendMediaGroupWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response PostSendMediaGroupResponse) -- ^ Monadic computation which returns the result of the operation
postSendMediaGroupWithConfiguration config = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostSendMediaGroupResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSendMediaGroupResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                            PostSendMediaGroupResponseBody200)
                                                                                                                                                                                          | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSendMediaGroupResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                                          | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendMediaGroup") GHC.Base.mempty)
-- | > POST /sendMediaGroup
-- 
-- The same as 'postSendMediaGroup' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSendMediaGroupRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSendMediaGroupRaw = GHC.Base.id (TgBotAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendMediaGroup") GHC.Base.mempty)
-- | > POST /sendMediaGroup
-- 
-- The same as 'postSendMediaGroup' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSendMediaGroupWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSendMediaGroupWithConfigurationRaw config = GHC.Base.id (TgBotAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/sendMediaGroup") GHC.Base.mempty)
