-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postDeleteWebhook
module TgBotAPI.Operations.PostDeleteWebhook where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /deleteWebhook
-- 
-- Use this method to remove webhook integration if you decide to switch back to [getUpdates](https:\/\/core.telegram.org\/bots\/api\/\#getupdates). Returns *True* on success.
postDeleteWebhook :: forall m . TgBotAPI.Common.MonadHTTP m => PostDeleteWebhookRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostDeleteWebhookResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteWebhook body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostDeleteWebhookResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteWebhookResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                      PostDeleteWebhookResponseBody200)
                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteWebhookResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                        Error)
                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteWebhook") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/deleteWebhook.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteWebhookRequestBody = PostDeleteWebhookRequestBody {
  -- | drop_pending_updates: Pass *True* to drop all pending updates
  postDeleteWebhookRequestBodyDropPendingUpdates :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteWebhookRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("drop_pending_updates" Data.Aeson.Types.ToJSON..= postDeleteWebhookRequestBodyDropPendingUpdates obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("drop_pending_updates" Data.Aeson.Types.ToJSON..= postDeleteWebhookRequestBodyDropPendingUpdates obj)
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteWebhookRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteWebhookRequestBody" (\obj -> GHC.Base.pure PostDeleteWebhookRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "drop_pending_updates"))
-- | Create a new 'PostDeleteWebhookRequestBody' with all required fields.
mkPostDeleteWebhookRequestBody :: PostDeleteWebhookRequestBody
mkPostDeleteWebhookRequestBody = PostDeleteWebhookRequestBody{postDeleteWebhookRequestBodyDropPendingUpdates = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'postDeleteWebhook'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostDeleteWebhookResponseError' is used.
data PostDeleteWebhookResponse =
   PostDeleteWebhookResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostDeleteWebhookResponse200 PostDeleteWebhookResponseBody200 -- ^ 
  | PostDeleteWebhookResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/deleteWebhook.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostDeleteWebhookResponseBody200 = PostDeleteWebhookResponseBody200 {
  -- | ok
  postDeleteWebhookResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postDeleteWebhookResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostDeleteWebhookResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postDeleteWebhookResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postDeleteWebhookResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postDeleteWebhookResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postDeleteWebhookResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostDeleteWebhookResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostDeleteWebhookResponseBody200" (\obj -> (GHC.Base.pure PostDeleteWebhookResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostDeleteWebhookResponseBody200' with all required fields.
mkPostDeleteWebhookResponseBody200 :: GHC.Types.Bool -- ^ 'postDeleteWebhookResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postDeleteWebhookResponseBody200Result'
  -> PostDeleteWebhookResponseBody200
mkPostDeleteWebhookResponseBody200 postDeleteWebhookResponseBody200Ok postDeleteWebhookResponseBody200Result = PostDeleteWebhookResponseBody200{postDeleteWebhookResponseBody200Ok = postDeleteWebhookResponseBody200Ok,
                                                                                                                                                postDeleteWebhookResponseBody200Result = postDeleteWebhookResponseBody200Result}
-- | > POST /deleteWebhook
-- 
-- The same as 'postDeleteWebhook' but accepts an explicit configuration.
postDeleteWebhookWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostDeleteWebhookRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostDeleteWebhookResponse) -- ^ Monadic computation which returns the result of the operation
postDeleteWebhookWithConfiguration config
                                   body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostDeleteWebhookResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteWebhookResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                       PostDeleteWebhookResponseBody200)
                                                                                                                                                                                      | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostDeleteWebhookResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                         Error)
                                                                                                                                                                                      | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteWebhook") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /deleteWebhook
-- 
-- The same as 'postDeleteWebhook' but returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteWebhookRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostDeleteWebhookRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postDeleteWebhookRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteWebhook") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /deleteWebhook
-- 
-- The same as 'postDeleteWebhook' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postDeleteWebhookWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostDeleteWebhookRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postDeleteWebhookWithConfigurationRaw config
                                      body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/deleteWebhook") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
