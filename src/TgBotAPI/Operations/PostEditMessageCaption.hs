-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postEditMessageCaption
module TgBotAPI.Operations.PostEditMessageCaption where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /editMessageCaption
-- 
-- Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https:\/\/core.telegram.org\/bots\/api\/\#message) is returned, otherwise *True* is returned.
postEditMessageCaption :: forall m . TgBotAPI.Common.MonadHTTP m => PostEditMessageCaptionRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostEditMessageCaptionResponse) -- ^ Monadic computation which returns the result of the operation
postEditMessageCaption body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostEditMessageCaptionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostEditMessageCaptionResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                     PostEditMessageCaptionResponseBody200)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostEditMessageCaptionResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                       Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/editMessageCaption") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/editMessageCaption.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostEditMessageCaptionRequestBody = PostEditMessageCaptionRequestBody {
  -- | caption: New caption of the message, 0-1024 characters after entities parsing
  postEditMessageCaptionRequestBodyCaption :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | caption_entities: List of special entities that appear in the caption, which can be specified instead of *parse\\_mode*
  , postEditMessageCaptionRequestBodyCaptionEntities :: (GHC.Maybe.Maybe ([MessageEntity]))
  -- | chat_id: Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  , postEditMessageCaptionRequestBodyChatId :: (GHC.Maybe.Maybe PostEditMessageCaptionRequestBodyChatIdVariants)
  -- | inline_message_id: Required if *chat\\_id* and *message\\_id* are not specified. Identifier of the inline message
  , postEditMessageCaptionRequestBodyInlineMessageId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | message_id: Required if *inline\\_message\\_id* is not specified. Identifier of the message to edit
  , postEditMessageCaptionRequestBodyMessageId :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | parse_mode: Mode for parsing entities in the message caption. See [formatting options](https:\/\/core.telegram.org\/bots\/api\/\#formatting-options) for more details.
  , postEditMessageCaptionRequestBodyParseMode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reply_markup: This object represents an [inline keyboard](https:\/\/core.telegram.org\/bots\#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
  , postEditMessageCaptionRequestBodyReplyMarkup :: (GHC.Maybe.Maybe InlineKeyboardMarkup)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageCaptionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("caption" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyCaption obj : "caption_entities" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyCaptionEntities obj : "chat_id" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyChatId obj : "inline_message_id" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyInlineMessageId obj : "message_id" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyMessageId obj : "parse_mode" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyParseMode obj : "reply_markup" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyReplyMarkup obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("caption" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyCaption obj) GHC.Base.<> (("caption_entities" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyCaptionEntities obj) GHC.Base.<> (("chat_id" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyChatId obj) GHC.Base.<> (("inline_message_id" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyInlineMessageId obj) GHC.Base.<> (("message_id" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyMessageId obj) GHC.Base.<> (("parse_mode" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyParseMode obj) GHC.Base.<> ("reply_markup" Data.Aeson.Types.ToJSON..= postEditMessageCaptionRequestBodyReplyMarkup obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageCaptionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostEditMessageCaptionRequestBody" (\obj -> ((((((GHC.Base.pure PostEditMessageCaptionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption_entities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inline_message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parse_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reply_markup"))
-- | Create a new 'PostEditMessageCaptionRequestBody' with all required fields.
mkPostEditMessageCaptionRequestBody :: PostEditMessageCaptionRequestBody
mkPostEditMessageCaptionRequestBody = PostEditMessageCaptionRequestBody{postEditMessageCaptionRequestBodyCaption = GHC.Maybe.Nothing,
                                                                        postEditMessageCaptionRequestBodyCaptionEntities = GHC.Maybe.Nothing,
                                                                        postEditMessageCaptionRequestBodyChatId = GHC.Maybe.Nothing,
                                                                        postEditMessageCaptionRequestBodyInlineMessageId = GHC.Maybe.Nothing,
                                                                        postEditMessageCaptionRequestBodyMessageId = GHC.Maybe.Nothing,
                                                                        postEditMessageCaptionRequestBodyParseMode = GHC.Maybe.Nothing,
                                                                        postEditMessageCaptionRequestBodyReplyMarkup = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/editMessageCaption.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Required if *inline\\_message\\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostEditMessageCaptionRequestBodyChatIdVariants =
   PostEditMessageCaptionRequestBodyChatIdInt GHC.Types.Int
  | PostEditMessageCaptionRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageCaptionRequestBodyChatIdVariants
    where toJSON (PostEditMessageCaptionRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostEditMessageCaptionRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageCaptionRequestBodyChatIdVariants
    where parseJSON val = case (PostEditMessageCaptionRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostEditMessageCaptionRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postEditMessageCaption'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostEditMessageCaptionResponseError' is used.
data PostEditMessageCaptionResponse =
   PostEditMessageCaptionResponseError Data.Text.Text -- ^ Means either no matching case available or a parse error
  | PostEditMessageCaptionResponse200 PostEditMessageCaptionResponseBody200 -- ^ 
  | PostEditMessageCaptionResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/editMessageCaption.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostEditMessageCaptionResponseBody200 = PostEditMessageCaptionResponseBody200 {
  -- | ok
  postEditMessageCaptionResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postEditMessageCaptionResponseBody200Result :: PostEditMessageCaptionResponseBody200ResultVariants
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageCaptionResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postEditMessageCaptionResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postEditMessageCaptionResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postEditMessageCaptionResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postEditMessageCaptionResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageCaptionResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostEditMessageCaptionResponseBody200" (\obj -> (GHC.Base.pure PostEditMessageCaptionResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostEditMessageCaptionResponseBody200' with all required fields.
mkPostEditMessageCaptionResponseBody200 :: GHC.Types.Bool -- ^ 'postEditMessageCaptionResponseBody200Ok'
  -> PostEditMessageCaptionResponseBody200ResultVariants -- ^ 'postEditMessageCaptionResponseBody200Result'
  -> PostEditMessageCaptionResponseBody200
mkPostEditMessageCaptionResponseBody200 postEditMessageCaptionResponseBody200Ok postEditMessageCaptionResponseBody200Result = PostEditMessageCaptionResponseBody200{postEditMessageCaptionResponseBody200Ok = postEditMessageCaptionResponseBody200Ok,
                                                                                                                                                                    postEditMessageCaptionResponseBody200Result = postEditMessageCaptionResponseBody200Result}
-- | Defines the oneOf schema located at @paths.\/editMessageCaption.POST.responses.200.content.application\/json.schema.properties.result.anyOf@ in the specification.
-- 
-- 
data PostEditMessageCaptionResponseBody200ResultVariants =
   PostEditMessageCaptionResponseBody200ResultMessage Message
  | PostEditMessageCaptionResponseBody200ResultBool GHC.Types.Bool
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostEditMessageCaptionResponseBody200ResultVariants
    where toJSON (PostEditMessageCaptionResponseBody200ResultMessage a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostEditMessageCaptionResponseBody200ResultBool a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostEditMessageCaptionResponseBody200ResultVariants
    where parseJSON val = case (PostEditMessageCaptionResponseBody200ResultMessage Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostEditMessageCaptionResponseBody200ResultBool Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | > POST /editMessageCaption
-- 
-- The same as 'postEditMessageCaption' but accepts an explicit configuration.
postEditMessageCaptionWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostEditMessageCaptionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostEditMessageCaptionResponse) -- ^ Monadic computation which returns the result of the operation
postEditMessageCaptionWithConfiguration config
                                        body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostEditMessageCaptionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostEditMessageCaptionResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                                      PostEditMessageCaptionResponseBody200)
                                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostEditMessageCaptionResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                        Error)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/editMessageCaption") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /editMessageCaption
-- 
-- The same as 'postEditMessageCaption' but returns the raw 'Data.ByteString.Char8.ByteString'.
postEditMessageCaptionRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostEditMessageCaptionRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postEditMessageCaptionRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/editMessageCaption") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /editMessageCaption
-- 
-- The same as 'postEditMessageCaption' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postEditMessageCaptionWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostEditMessageCaptionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postEditMessageCaptionWithConfigurationRaw config
                                           body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/editMessageCaption") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
