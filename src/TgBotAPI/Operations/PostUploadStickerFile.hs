{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postUploadStickerFile
module TgBotAPI.Operations.PostUploadStickerFile where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Bifunctor
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /uploadStickerFile
--
-- Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https:\/\/core.telegram.org\/bots\/api\/\#file) on success.
postUploadStickerFile :: forall m. TgBotAPI.Common.MonadHTTP m => -- | Monadic computation which returns the result of the operation
  TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostUploadStickerFileResponse)
postUploadStickerFile =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostUploadStickerFileResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostUploadStickerFileResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text PostUploadStickerFileResponseBody200)
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostUploadStickerFileResponseDefault
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (TgBotAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/uploadStickerFile") GHC.Base.mempty)

-- | Represents a response of the operation 'postUploadStickerFile'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostUploadStickerFileResponseError' is used.
data PostUploadStickerFileResponse
  = -- | Means either no matching case available or a parse error
    PostUploadStickerFileResponseError Data.Text.Text
  | -- |
    PostUploadStickerFileResponse200 PostUploadStickerFileResponseBody200
  | -- |
    PostUploadStickerFileResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/uploadStickerFile.POST.responses.200.content.application\/json.schema@ in the specification.
data PostUploadStickerFileResponseBody200 = PostUploadStickerFileResponseBody200
  { -- | ok
    postUploadStickerFileResponseBody200Ok :: GHC.Types.Bool,
    -- | result: This object represents a file ready to be downloaded. The file can be downloaded via the link \`https:\/\/api.telegram.org\/file\/bot\<token>\/\<file_path>\`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https:\/\/core.telegram.org\/bots\/api\/\#getfile).
    --
    --
    --
    -- Maximum file size to download is 20 MB
    postUploadStickerFileResponseBody200Result :: File
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostUploadStickerFileResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postUploadStickerFileResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postUploadStickerFileResponseBody200Result obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postUploadStickerFileResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postUploadStickerFileResponseBody200Result obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostUploadStickerFileResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostUploadStickerFileResponseBody200" (\obj -> (GHC.Base.pure PostUploadStickerFileResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))

-- | Create a new 'PostUploadStickerFileResponseBody200' with all required fields.
mkPostUploadStickerFileResponseBody200 ::
  -- | 'postUploadStickerFileResponseBody200Ok'
  GHC.Types.Bool ->
  -- | 'postUploadStickerFileResponseBody200Result'
  File ->
  PostUploadStickerFileResponseBody200
mkPostUploadStickerFileResponseBody200 postUploadStickerFileResponseBody200Ok postUploadStickerFileResponseBody200Result =
  PostUploadStickerFileResponseBody200
    { postUploadStickerFileResponseBody200Ok = postUploadStickerFileResponseBody200Ok,
      postUploadStickerFileResponseBody200Result = postUploadStickerFileResponseBody200Result
    }

-- | > POST /uploadStickerFile
--
-- The same as 'postUploadStickerFile' but accepts an explicit configuration.
postUploadStickerFileWithConfiguration ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  TgBotAPI.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostUploadStickerFileResponse)
postUploadStickerFileWithConfiguration config =
  GHC.Base.fmap
    ( \response_2 ->
        GHC.Base.fmap
          ( Data.Either.either PostUploadStickerFileResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostUploadStickerFileResponse200
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            PostUploadStickerFileResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostUploadStickerFileResponseDefault
                                     Data.Functor.<$> ( (Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) ::
                                                          Data.Either.Either
                                                            Data.Text.Text
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_2
          )
          response_2
    )
    (TgBotAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/uploadStickerFile") GHC.Base.mempty)

-- | > POST /uploadStickerFile
--
-- The same as 'postUploadStickerFile' but returns the raw 'Data.ByteString.Char8.ByteString'.
postUploadStickerFileRaw ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | Monadic computation which returns the result of the operation
  TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postUploadStickerFileRaw = GHC.Base.id (TgBotAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/uploadStickerFile") GHC.Base.mempty)

-- | > POST /uploadStickerFile
--
-- The same as 'postUploadStickerFile' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postUploadStickerFileWithConfigurationRaw ::
  forall m.
  TgBotAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  TgBotAPI.Common.Configuration ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postUploadStickerFileWithConfigurationRaw config = GHC.Base.id (TgBotAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/uploadStickerFile") GHC.Base.mempty)
