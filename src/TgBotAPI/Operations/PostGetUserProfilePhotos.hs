-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postGetUserProfilePhotos
module TgBotAPI.Operations.PostGetUserProfilePhotos where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /getUserProfilePhotos
-- 
-- Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https:\/\/core.telegram.org\/bots\/api\/\#userprofilephotos) object.
postGetUserProfilePhotos :: forall m . TgBotAPI.Common.MonadHTTP m => PostGetUserProfilePhotosRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostGetUserProfilePhotosResponse) -- ^ Monadic computation which returns the result of the operation
postGetUserProfilePhotos body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostGetUserProfilePhotosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetUserProfilePhotosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           PostGetUserProfilePhotosResponseBody200)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetUserProfilePhotosResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                             Error)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getUserProfilePhotos") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/getUserProfilePhotos.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetUserProfilePhotosRequestBody = PostGetUserProfilePhotosRequestBody {
  -- | limit: Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
  -- 
  -- Constraints:
  -- 
  -- * Maxium  of 100.0
  -- * Minimum  of 1.0
  postGetUserProfilePhotosRequestBodyLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | offset: Sequential number of the first photo to be returned. By default, all photos are returned.
  , postGetUserProfilePhotosRequestBodyOffset :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | user_id: Unique identifier of the target user
  , postGetUserProfilePhotosRequestBodyUserId :: GHC.Types.Int
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetUserProfilePhotosRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("limit" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosRequestBodyLimit obj : "offset" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosRequestBodyOffset obj : "user_id" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosRequestBodyUserId obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("limit" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosRequestBodyLimit obj) GHC.Base.<> (("offset" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosRequestBodyOffset obj) GHC.Base.<> ("user_id" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosRequestBodyUserId obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetUserProfilePhotosRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetUserProfilePhotosRequestBody" (\obj -> ((GHC.Base.pure PostGetUserProfilePhotosRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "limit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "offset")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "user_id"))
-- | Create a new 'PostGetUserProfilePhotosRequestBody' with all required fields.
mkPostGetUserProfilePhotosRequestBody :: GHC.Types.Int -- ^ 'postGetUserProfilePhotosRequestBodyUserId'
  -> PostGetUserProfilePhotosRequestBody
mkPostGetUserProfilePhotosRequestBody postGetUserProfilePhotosRequestBodyUserId = PostGetUserProfilePhotosRequestBody{postGetUserProfilePhotosRequestBodyLimit = GHC.Maybe.Nothing,
                                                                                                                      postGetUserProfilePhotosRequestBodyOffset = GHC.Maybe.Nothing,
                                                                                                                      postGetUserProfilePhotosRequestBodyUserId = postGetUserProfilePhotosRequestBodyUserId}
-- | Represents a response of the operation 'postGetUserProfilePhotos'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostGetUserProfilePhotosResponseError' is used.
data PostGetUserProfilePhotosResponse =
   PostGetUserProfilePhotosResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostGetUserProfilePhotosResponse200 PostGetUserProfilePhotosResponseBody200 -- ^ 
  | PostGetUserProfilePhotosResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/getUserProfilePhotos.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostGetUserProfilePhotosResponseBody200 = PostGetUserProfilePhotosResponseBody200 {
  -- | ok
  postGetUserProfilePhotosResponseBody200Ok :: GHC.Types.Bool
  -- | result: This object represent a user\'s profile pictures.
  , postGetUserProfilePhotosResponseBody200Result :: UserProfilePhotos
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostGetUserProfilePhotosResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postGetUserProfilePhotosResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostGetUserProfilePhotosResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostGetUserProfilePhotosResponseBody200" (\obj -> (GHC.Base.pure PostGetUserProfilePhotosResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostGetUserProfilePhotosResponseBody200' with all required fields.
mkPostGetUserProfilePhotosResponseBody200 :: GHC.Types.Bool -- ^ 'postGetUserProfilePhotosResponseBody200Ok'
  -> UserProfilePhotos -- ^ 'postGetUserProfilePhotosResponseBody200Result'
  -> PostGetUserProfilePhotosResponseBody200
mkPostGetUserProfilePhotosResponseBody200 postGetUserProfilePhotosResponseBody200Ok postGetUserProfilePhotosResponseBody200Result = PostGetUserProfilePhotosResponseBody200{postGetUserProfilePhotosResponseBody200Ok = postGetUserProfilePhotosResponseBody200Ok,
                                                                                                                                                                            postGetUserProfilePhotosResponseBody200Result = postGetUserProfilePhotosResponseBody200Result}
-- | > POST /getUserProfilePhotos
-- 
-- The same as 'postGetUserProfilePhotos' but accepts an explicit configuration.
postGetUserProfilePhotosWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostGetUserProfilePhotosRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostGetUserProfilePhotosResponse) -- ^ Monadic computation which returns the result of the operation
postGetUserProfilePhotosWithConfiguration config
                                          body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostGetUserProfilePhotosResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostGetUserProfilePhotosResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                            PostGetUserProfilePhotosResponseBody200)
                                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostGetUserProfilePhotosResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getUserProfilePhotos") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /getUserProfilePhotos
-- 
-- The same as 'postGetUserProfilePhotos' but returns the raw 'Data.ByteString.Char8.ByteString'.
postGetUserProfilePhotosRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostGetUserProfilePhotosRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postGetUserProfilePhotosRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getUserProfilePhotos") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /getUserProfilePhotos
-- 
-- The same as 'postGetUserProfilePhotos' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postGetUserProfilePhotosWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostGetUserProfilePhotosRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postGetUserProfilePhotosWithConfigurationRaw config
                                             body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/getUserProfilePhotos") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
