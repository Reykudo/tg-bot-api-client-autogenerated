-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSetChatDescription
module TgBotAPI.Operations.PostSetChatDescription where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /setChatDescription
-- 
-- Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
postSetChatDescription :: forall m . TgBotAPI.Common.MonadHTTP m => PostSetChatDescriptionRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSetChatDescriptionResponse) -- ^ Monadic computation which returns the result of the operation
postSetChatDescription body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSetChatDescriptionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatDescriptionResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                     PostSetChatDescriptionResponseBody200)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatDescriptionResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                       Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatDescription") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/setChatDescription.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetChatDescriptionRequestBody = PostSetChatDescriptionRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postSetChatDescriptionRequestBodyChatId :: PostSetChatDescriptionRequestBodyChatIdVariants
  -- | description: New chat description, 0-255 characters
  , postSetChatDescriptionRequestBodyDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatDescriptionRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postSetChatDescriptionRequestBodyChatId obj : "description" Data.Aeson.Types.ToJSON..= postSetChatDescriptionRequestBodyDescription obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postSetChatDescriptionRequestBodyChatId obj) GHC.Base.<> ("description" Data.Aeson.Types.ToJSON..= postSetChatDescriptionRequestBodyDescription obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatDescriptionRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetChatDescriptionRequestBody" (\obj -> (GHC.Base.pure PostSetChatDescriptionRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description"))
-- | Create a new 'PostSetChatDescriptionRequestBody' with all required fields.
mkPostSetChatDescriptionRequestBody :: PostSetChatDescriptionRequestBodyChatIdVariants -- ^ 'postSetChatDescriptionRequestBodyChatId'
  -> PostSetChatDescriptionRequestBody
mkPostSetChatDescriptionRequestBody postSetChatDescriptionRequestBodyChatId = PostSetChatDescriptionRequestBody{postSetChatDescriptionRequestBodyChatId = postSetChatDescriptionRequestBodyChatId,
                                                                                                                postSetChatDescriptionRequestBodyDescription = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/setChatDescription.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostSetChatDescriptionRequestBodyChatIdVariants =
   PostSetChatDescriptionRequestBodyChatIdInt GHC.Types.Int
  | PostSetChatDescriptionRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatDescriptionRequestBodyChatIdVariants
    where toJSON (PostSetChatDescriptionRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSetChatDescriptionRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatDescriptionRequestBodyChatIdVariants
    where parseJSON val = case (PostSetChatDescriptionRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSetChatDescriptionRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postSetChatDescription'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSetChatDescriptionResponseError' is used.
data PostSetChatDescriptionResponse =
   PostSetChatDescriptionResponseError Data.Text.Text -- ^ Means either no matching case available or a parse error
  | PostSetChatDescriptionResponse200 PostSetChatDescriptionResponseBody200 -- ^ 
  | PostSetChatDescriptionResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/setChatDescription.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetChatDescriptionResponseBody200 = PostSetChatDescriptionResponseBody200 {
  -- | ok
  postSetChatDescriptionResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postSetChatDescriptionResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatDescriptionResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSetChatDescriptionResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSetChatDescriptionResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSetChatDescriptionResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSetChatDescriptionResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatDescriptionResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetChatDescriptionResponseBody200" (\obj -> (GHC.Base.pure PostSetChatDescriptionResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSetChatDescriptionResponseBody200' with all required fields.
mkPostSetChatDescriptionResponseBody200 :: GHC.Types.Bool -- ^ 'postSetChatDescriptionResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postSetChatDescriptionResponseBody200Result'
  -> PostSetChatDescriptionResponseBody200
mkPostSetChatDescriptionResponseBody200 postSetChatDescriptionResponseBody200Ok postSetChatDescriptionResponseBody200Result = PostSetChatDescriptionResponseBody200{postSetChatDescriptionResponseBody200Ok = postSetChatDescriptionResponseBody200Ok,
                                                                                                                                                                    postSetChatDescriptionResponseBody200Result = postSetChatDescriptionResponseBody200Result}
-- | > POST /setChatDescription
-- 
-- The same as 'postSetChatDescription' but accepts an explicit configuration.
postSetChatDescriptionWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSetChatDescriptionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostSetChatDescriptionResponse) -- ^ Monadic computation which returns the result of the operation
postSetChatDescriptionWithConfiguration config
                                        body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostSetChatDescriptionResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatDescriptionResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                                      PostSetChatDescriptionResponseBody200)
                                                                                                                                                                                                | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatDescriptionResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                        Error)
                                                                                                                                                                                                | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatDescription") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /setChatDescription
-- 
-- The same as 'postSetChatDescription' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSetChatDescriptionRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostSetChatDescriptionRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSetChatDescriptionRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatDescription") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /setChatDescription
-- 
-- The same as 'postSetChatDescription' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSetChatDescriptionWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSetChatDescriptionRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSetChatDescriptionWithConfigurationRaw config
                                           body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatDescription") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
