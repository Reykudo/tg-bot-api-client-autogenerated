-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postSetChatTitle
module TgBotAPI.Operations.PostSetChatTitle where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified Data.Bifunctor
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified TgBotAPI.Common
import TgBotAPI.Types

-- | > POST /setChatTitle
-- 
-- Use this method to change the title of a chat. Titles can\'t be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
postSetChatTitle :: forall m . TgBotAPI.Common.MonadHTTP m => PostSetChatTitleRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSetChatTitleResponse) -- ^ Monadic computation which returns the result of the operation
postSetChatTitle body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostSetChatTitleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatTitleResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                   PostSetChatTitleResponseBody200)
                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatTitleResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                     Error)
                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatTitle") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | Defines the object schema located at @paths.\/setChatTitle.POST.requestBody.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetChatTitleRequestBody = PostSetChatTitleRequestBody {
  -- | chat_id: Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
  postSetChatTitleRequestBodyChatId :: PostSetChatTitleRequestBodyChatIdVariants
  -- | title: New chat title, 1-255 characters
  , postSetChatTitleRequestBodyTitle :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatTitleRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object ("chat_id" Data.Aeson.Types.ToJSON..= postSetChatTitleRequestBodyChatId obj : "title" Data.Aeson.Types.ToJSON..= postSetChatTitleRequestBodyTitle obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("chat_id" Data.Aeson.Types.ToJSON..= postSetChatTitleRequestBodyChatId obj) GHC.Base.<> ("title" Data.Aeson.Types.ToJSON..= postSetChatTitleRequestBodyTitle obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatTitleRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetChatTitleRequestBody" (\obj -> (GHC.Base.pure PostSetChatTitleRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "chat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))
-- | Create a new 'PostSetChatTitleRequestBody' with all required fields.
mkPostSetChatTitleRequestBody :: PostSetChatTitleRequestBodyChatIdVariants -- ^ 'postSetChatTitleRequestBodyChatId'
  -> Data.Text.Internal.Text -- ^ 'postSetChatTitleRequestBodyTitle'
  -> PostSetChatTitleRequestBody
mkPostSetChatTitleRequestBody postSetChatTitleRequestBodyChatId postSetChatTitleRequestBodyTitle = PostSetChatTitleRequestBody{postSetChatTitleRequestBodyChatId = postSetChatTitleRequestBodyChatId,
                                                                                                                               postSetChatTitleRequestBodyTitle = postSetChatTitleRequestBodyTitle}
-- | Defines the oneOf schema located at @paths.\/setChatTitle.POST.requestBody.content.application\/json.schema.properties.chat_id.anyOf@ in the specification.
-- 
-- Unique identifier for the target chat or username of the target channel (in the format \`\@channelusername\`)
data PostSetChatTitleRequestBodyChatIdVariants =
   PostSetChatTitleRequestBodyChatIdInt GHC.Types.Int
  | PostSetChatTitleRequestBodyChatIdText Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatTitleRequestBodyChatIdVariants
    where toJSON (PostSetChatTitleRequestBodyChatIdInt a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostSetChatTitleRequestBodyChatIdText a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatTitleRequestBodyChatIdVariants
    where parseJSON val = case (PostSetChatTitleRequestBodyChatIdInt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostSetChatTitleRequestBodyChatIdText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postSetChatTitle'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSetChatTitleResponseError' is used.
data PostSetChatTitleResponse =
   PostSetChatTitleResponseError Data.Text.Text -- ^ Means either no matching case available or a parse error
  | PostSetChatTitleResponse200 PostSetChatTitleResponseBody200 -- ^ 
  | PostSetChatTitleResponseDefault Error -- ^ 
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/setChatTitle.POST.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data PostSetChatTitleResponseBody200 = PostSetChatTitleResponseBody200 {
  -- | ok
  postSetChatTitleResponseBody200Ok :: GHC.Types.Bool
  -- | result
  , postSetChatTitleResponseBody200Result :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostSetChatTitleResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object ("ok" Data.Aeson.Types.ToJSON..= postSetChatTitleResponseBody200Ok obj : "result" Data.Aeson.Types.ToJSON..= postSetChatTitleResponseBody200Result obj : GHC.Base.mempty)
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ok" Data.Aeson.Types.ToJSON..= postSetChatTitleResponseBody200Ok obj) GHC.Base.<> ("result" Data.Aeson.Types.ToJSON..= postSetChatTitleResponseBody200Result obj))
instance Data.Aeson.Types.FromJSON.FromJSON PostSetChatTitleResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSetChatTitleResponseBody200" (\obj -> (GHC.Base.pure PostSetChatTitleResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ok")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result"))
-- | Create a new 'PostSetChatTitleResponseBody200' with all required fields.
mkPostSetChatTitleResponseBody200 :: GHC.Types.Bool -- ^ 'postSetChatTitleResponseBody200Ok'
  -> GHC.Types.Bool -- ^ 'postSetChatTitleResponseBody200Result'
  -> PostSetChatTitleResponseBody200
mkPostSetChatTitleResponseBody200 postSetChatTitleResponseBody200Ok postSetChatTitleResponseBody200Result = PostSetChatTitleResponseBody200{postSetChatTitleResponseBody200Ok = postSetChatTitleResponseBody200Ok,
                                                                                                                                            postSetChatTitleResponseBody200Result = postSetChatTitleResponseBody200Result}
-- | > POST /setChatTitle
-- 
-- The same as 'postSetChatTitle' but accepts an explicit configuration.
postSetChatTitleWithConfiguration :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSetChatTitleRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response PostSetChatTitleResponse) -- ^ Monadic computation which returns the result of the operation
postSetChatTitleWithConfiguration config
                                  body = GHC.Base.fmap (\response_2 -> GHC.Base.fmap (Data.Either.either PostSetChatTitleResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatTitleResponse200 Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                                                                    PostSetChatTitleResponseBody200)
                                                                                                                                                                                    | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostSetChatTitleResponseDefault Data.Functor.<$> ((Data.Bifunctor.first Data.Text.pack (Data.Aeson.eitherDecodeStrict body)) :: Data.Either.Either Data.Text.Text
                                                                                                                                                                                                                                                                                                                                                                                      Error)
                                                                                                                                                                                    | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_2) response_2) (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatTitle") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /setChatTitle
-- 
-- The same as 'postSetChatTitle' but returns the raw 'Data.ByteString.Char8.ByteString'.
postSetChatTitleRaw :: forall m . TgBotAPI.Common.MonadHTTP m => PostSetChatTitleRequestBody -- ^ The request body to send
  -> TgBotAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSetChatTitleRaw body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatTitle") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
-- | > POST /setChatTitle
-- 
-- The same as 'postSetChatTitle' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postSetChatTitleWithConfigurationRaw :: forall m . TgBotAPI.Common.MonadHTTP m => TgBotAPI.Common.Configuration -- ^ The configuration to use in the request
  -> PostSetChatTitleRequestBody -- ^ The request body to send
  -> m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString) -- ^ Monadic computation which returns the result of the operation
postSetChatTitleWithConfigurationRaw config
                                     body = GHC.Base.id (TgBotAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/setChatTitle") GHC.Base.mempty (GHC.Maybe.Just body) TgBotAPI.Common.RequestBodyEncodingJSON)
